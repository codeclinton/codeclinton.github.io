<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Warpspire</title>
 <link href="http://warpspire.com/feed" rel="self"/>
 <link href="http://warpspire.com/"/>
 <updated>2015-05-26T07:25:56-04:00</updated>
 <id>http://warpspire.com/</id>
 <author>
   <name>Kyle Neath</name>
   <email>kneath+warpspire@gmail.com</email>
 </author>

 
 <entry>
   <title>Measuring emotion</title>
   
     <link href="http://warpspire.com/blog/emotional-understanding" />
   
   <updated>2015-05-04T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/emotional-understanding</id>
   <content type="html">&lt;p&gt;One of the most important responsibilities for managers in tech companies are having regular &lt;a href=&quot;http://www.bhorowitz.com/one_on_one&quot;&gt;one-on-ones&lt;/a&gt; with their team. The idea is to meet with each member of the team once every week or two, face-to-face, to talk about whatever the team member wants. And the face-to-face part is crucial. Our brains process an immense amount of information during a conversation —  eye contact, facial expressions, intonation, body language — everything that&amp;rsquo;s beyond the content of our words (what an email might convey). This information trains our intuitive reasoning,  building understanding and perspective — allowing us to better understand what the other person &lt;em&gt;means&lt;/em&gt; when they say something.&lt;/p&gt;

&lt;p&gt;Yet there is an entire class of managers in software today that avoid face to face interaction with those they manage: product managers. It&amp;rsquo;s common for a product manager to be running multiple experiments every week, but how common is it for a product manager to spend face time with multiple customers every week? Why is that?&lt;/p&gt;

&lt;p&gt;The vibe I get from our industry today is that product managers believe measurable data and analytical reasoning are king and result in superior decisions. Many even believe with enough effort, they can measure emotion. They see emotions in their analytical world view: as a (difficult) metric to be measured, tested, and improved. This is how we end up associating ideas like Churn (an artifact of your billing data) with an emotion like Frustration (something a human feels). But emotion can&amp;rsquo;t be measured, it must be felt.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I recently listened to a great Planet Money episode on &lt;a href=&quot;http://www.npr.org/blogs/money/2015/02/25/389027988/episode-606-spreadsheets&quot;&gt;Spreadsheets!&lt;/a&gt; that discusses the history of spreadsheets and how it&amp;rsquo;s changed the way we make decisions. The episode was inspired after an article written in 1984 about the significance and danger of the advance of spreadsheets:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The spreadsheet is a tool, and it is also a world view — reality by the numbers.&lt;/p&gt;

&lt;p&gt;— Steven Levy on &lt;a href=&quot;https://medium.com/backchannel/a-spreadsheet-way-of-knowledge-8de60af7146e&quot;&gt;A Spreadsheet Way of Knowledge&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Many of us don&amp;rsquo;t use spreadsheets today, but we do use tools that came from spreadsheets and promote the same world view. We compare competing Facebook events by the number of RSVPs hoping to optimize our party enjoyment. We sort by rating on Amazon hoping to optimize our dollar. We scour Yelp and Foursquare to optimize the enjoyment of our meals. And product managers crunch numbers and run experiments to optimize their product decisions.&lt;/p&gt;

&lt;p&gt;Take a minute to think about how the spreadsheet has changed your life. How often do you make a decision without researching how to optimize something?&lt;/p&gt;

&lt;p&gt;This is not to say we shouldn&amp;rsquo;t use &amp;ldquo;spreadsheets&amp;rdquo; to optimize our decisions. We often &lt;em&gt;do&lt;/em&gt; make better decisions through data analysis. Rather, what I think is interesting is just how significant our bias toward analytical reasoning has become. Our hammer is the spreadsheet, and now we&amp;rsquo;re making everything in product management a nail.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I&amp;rsquo;ve long been a believer that your environment significantly shapes the type of products you can build. &lt;em&gt;Have nothing in your houses that you do not know to be useful, or believe to be beautiful.&lt;/em&gt; When you&amp;rsquo;re building software, your environment is primarily made up of the tools and processes you use. And when I look at the processes that dominate our industry today — Agile/XP, Lean, Data-Driven — they have a common trait. They assume a lack of emotion — an overriding rationality of our customers.&lt;/p&gt;

&lt;p&gt;Think about &lt;a href=&quot;http://www.agilemodeling.com/artifacts/userStory.htm&quot;&gt;Agile/XP User Stories&lt;/a&gt;. The original purpose of a User Story was to produce an estimate for work. But the unintended consequence is that User Stories have become a popular tool for product managers who believe they are communicating the perspective of customers. Why describe functionality when you can communicate what the customer wants?&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;http://assets.warpspire.com/images/measuring-emotion/user-story.jpg&quot; alt=&quot;An example User Story&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;But this is reality only by the numbers. I guarantee you that no one &lt;em&gt;wants&lt;/em&gt; to purchase a parking pass. Many people want a parking pass, but no one wants to purchase it. This Story is useful as a feature requirement, but in no way does it communicate the perspective of the user. What would happen if we actually tried to communicate the perspective of a user?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Christine just got her second parking ticket this week. She walks up to her car and screams &lt;em&gt;this is fucking bullshit!&lt;/em&gt; She admits to herself that she really does need to spend her Apple Watch money on a parking pass. &lt;em&gt;Bullshit!&lt;/em&gt; She&amp;rsquo;s already dreading the lecture from her mother once she gets a copy of this ticket in the mail. But, she has to admit that she&amp;rsquo;s looking forward to the relief of parking without worrying about tickets. Still. No watch. Blergh.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you feel her anger and frustration? How does a User Story communicate this? It doesn&amp;rsquo;t. It assumes Christine is a golden child, birthed of pure rationality and light who simply does not drive to school without a parking pass.&lt;/p&gt;

&lt;p&gt;What advantage does the User Story have if it is not communicating customer perspective? What value do we gain by saying &lt;em&gt;As a student I want to purchase a parking pass so that I can drive to school&lt;/em&gt; over something more straightforward like &lt;em&gt;Students can purchase a parking pass.&lt;/em&gt; We&amp;rsquo;ve gotten too analytical with our tools. We&amp;rsquo;ve bulldozed emotion without realizing what we were doing.&lt;/p&gt;

&lt;p&gt;How might you change your design if your tools promoted an emotional understanding of Christine&amp;rsquo;s perspective? What if immediate purchase included a discount or forgiveness for the ticket itself? You might just end up with happier students and more parking passes sold.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Unfortunately, things get sticky when we leave our numbers behind. We&amp;rsquo;re not practiced at feeling emotion in a professional environment. We associate emotions with irrationality and poor decisions — something to be avoided. As an organization approaches &lt;a href=&quot;http://en.wikipedia.org/wiki/Dunbar%27s_number&quot;&gt;Dunbar&amp;rsquo;s number&lt;/a&gt;, being vulnerable and feeling emotion becomes less and less safe. Our customers continue to feel and be swayed by emotion just like the rest of us while we&amp;rsquo;re busy building a world in where we don&amp;rsquo;t have to feel.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time we revisited our tools with a focus on promoting emotional understanding. Our customers deserve it. And frankly, we&amp;rsquo;ve been &lt;a href=&quot;http://meyerweb.com/eric/thoughts/2014/12/24/inadvertent-algorithmic-cruelty/&quot;&gt;fucking up&lt;/a&gt; their lives with our lack of empathy. I don&amp;rsquo;t have the complete answer, but I do have some suggestions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jobs to be Done&lt;/strong&gt;&lt;br/&gt;
  JTBD is my favorite software design tool of the past five years. But my favorite part is that it forces you to acknowledge the emotional aspect of why people use or don&amp;rsquo;t use your product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Regular one-on-ones with customers&lt;/strong&gt;&lt;br/&gt;
  Spend time with your customers where it&amp;rsquo;s all about &lt;em&gt;them&lt;/em&gt; — without survey questions or a predefined conversation structure. You might even make a new friend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer stories&lt;/strong&gt;&lt;br/&gt;
  One thing &lt;a href=&quot;https://twitter.com/tenaciouscb&quot;&gt;Chrissie&lt;/a&gt; did while she was creating GitHub&amp;rsquo;s User Research department was to include stories of individual customers in all of our UXR studies. In the midst of data spanning thousands of customers and millions of records, there&amp;rsquo;d be a story about Alice&amp;rsquo;s feelings. This is what Alice thinks Pull Requests are. This is how she explains them with a crayon and a piece of paper. Stories about individuals carry tremendous power over our emotions. Think about how we are drawn to the characters in novels and TV shows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use all of your product&lt;/strong&gt;&lt;br/&gt;
  Do you pay for your own product? Do you register for a new account on a regular basis? Do you use every screen, even if you don&amp;rsquo;t have a reason to? How often do you modify your account settings? You might be surprised at how much better you understand those snarky tweets if you set aside time to use your product for tasks you have no need to accomplish.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Train your intuition&lt;/strong&gt;&lt;br/&gt;
  Don&amp;rsquo;t be bullied into the world view that every decision must be proven with data. Fed by enough meaningful experience, our intuitive reasoning is extremely powerful. Train your intuition, and learn how to communicate intuitive reasoning.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;If we want to build better products, we must learn to include emotional understanding into our product decisions without resorting to analytical reasoning. Emotions must be felt.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Moral Bucket List</title>
   
     <link href="http://www.nytimes.com/2015/04/12/opinion/sunday/david-brooks-the-moral-bucket-list.html" />
   
   <updated>2015-04-20T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-moral-bucket-list</id>
   <content type="html">&lt;p&gt;As someone who&amp;rsquo;s recently struggled with the pace of my work and where to focus my energy, I really related to David Brooks&#39; recent essay &lt;a href=&quot;http://www.nytimes.com/2015/04/12/opinion/sunday/david-brooks-the-moral-bucket-list.html&quot;&gt;The Moral Bucket List&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But I confess I often have a sadder thought: It occurs to me that I’ve achieved a decent level of career success, but I have not achieved that. I have not achieved that generosity of spirit, or that depth of character.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On passions:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Commencement speakers are always telling young people to follow their passions. Be true to yourself. This is a vision of life that begins with self and ends with self. But people on the road to inner light do not find their vocations by asking, what do I want from life? They ask, what is life asking of me? How can I match my intrinsic talent with one of the world’s deep needs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes! I&amp;rsquo;ve struggled with how to describe this feeling for a long time — this feeling that while it&amp;rsquo;s probably good advice to follow your passions, you may find more fulfillment following where you&amp;rsquo;re most needed. This essay is based on his new book &lt;a href=&quot;http://smile.amazon.com/dp/B00LYXV61Y/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&amp;amp;colid=66RA1Q33154U&amp;amp;coliid=I1SH8Z3BHLC8UM&quot;&gt;The Road to Character&lt;/a&gt;, which I&amp;rsquo;m pretty excited to dive into here soon.&lt;/p&gt;

&lt;p&gt;Pairs well with this fantastic answer on &lt;a href=&quot;http://www.quora.com/How-can-I-be-as-great-as-Bill-Gates-Steve-Jobs-Elon-Musk-Richard-Branson/answer/Justine-Musk?srid=iAix&amp;amp;share=1&quot;&gt;How can I be as great as Elon Musk?&lt;/a&gt; by his ex-wife, Justine:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;These people tend to be freaks and misfits who were forced to experience the world in an unusually challenging way. They developed strategies to survive, and as they grow older they find ways to apply these strategies to other things, and create for themselves a distinct and powerful advantage.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do your priorities lean toward being as great as Elon Musk, or achieving a depth of character? I think it&amp;rsquo;s a good question to ask yourself, especially if you work in power-hungry environment like technology.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Taste and The Zen of GitHub</title>
   
     <link href="http://warpspire.com/blog/taste" />
   
   <updated>2014-10-02T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/taste</id>
   <content type="html">&lt;p&gt;There&amp;rsquo;s a lot of interesting things that happen the first time you really grow a company. Most are exciting, some are challenging, and a few are downright confusing. Every organization (and individual inside) experiences growth differently, which makes for some great stories. This is one of mine.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;&lt;p&gt;The only problem with Microsoft is they just have no taste. They have absolutely no taste. And I don&amp;rsquo;t mean that in a small way, I mean that in a big way, in the sense that they don&amp;rsquo;t think of original ideas, and they don&amp;rsquo;t bring much culture into their products.&lt;/p&gt;

&lt;p&gt;— Steve Jobs&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve always loved this quote. And to be honest, I&amp;rsquo;m not sure why. It&amp;rsquo;s an empty statement. What does having no taste mean? How do original ideas and culture factor into taste? Microsoft has always had plenty of original ideas (designers tend to mock and ridicule these especially), and — well — of &lt;em&gt;course&lt;/em&gt; they have culture. That&amp;rsquo;s not a thing you can get rid of. It must be that their original ideas and culture were the wrong type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What makes Apple have taste and Microsoft have no taste?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;About two years ago, GitHub&amp;rsquo;s product development team was growing fast and I found myself thinking about these questions more and more. We were getting an influx of new points of view, new opinions, new frames of reference for &lt;em&gt;good taste&lt;/em&gt;. One thing that challenged me was watching design decisions round out to the path of least resistance. Like a majestic river once carving through the mountains, now encountering the flat valley and melting into a delta.&lt;/p&gt;

&lt;p&gt;And the only problem with deltas is they just have no taste.&lt;/p&gt;

&lt;h2&gt;So how do you build taste?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d argue that an organization&amp;rsquo;s taste is defined by the process and style in which they make design decisions. &lt;em&gt;What features belong in our product? Which prototype feels better? Do we need more iterations, or is this good enough?&lt;/em&gt; Are these questions answered by tools? By a process? By a person? Those answers are the essence of &lt;em&gt;taste&lt;/em&gt;. In other words, &lt;strong&gt;an organization&amp;rsquo;s taste is the way the  organization makes design decisions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the decisions are bold, opinionated, and cohesive — we tend to say the organization has taste. But if any of these are missing, we tend to label the entire organization as &lt;em&gt;lacking&lt;/em&gt; taste.&lt;/p&gt;

&lt;p&gt;Microsoft isn&amp;rsquo;t lacking taste — they have an overabundance of it.&lt;/p&gt;

&lt;p&gt;This is one of the biggest challenges a design leader faces. How do you ensure your team is capable of making bold, opinionated, and cohesive decisions &lt;em&gt;together&lt;/em&gt;? It was certainly challenging me. With new employees came different tastes — often clashing against each other, resulting in unproductive debate and unclear results.&lt;/p&gt;

&lt;p&gt;We needed some common ground.&lt;/p&gt;

&lt;h2&gt;Idiomatic code and The Zen of Python&lt;/h2&gt;

&lt;p&gt;As dynamic languages have become more popular, so have the phrases &lt;em&gt;idiomatic code&lt;/em&gt; and &lt;em&gt;good style&lt;/em&gt;. With dozens of ways to write each line of code, developers are expected to not only know &lt;em&gt;how&lt;/em&gt; to accomplish a task, but in &lt;em&gt;which style&lt;/em&gt; they should to accomplish it in.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies?&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies?&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run_away_to_the_woods!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is no &lt;em&gt;Chicago Manual of Style&lt;/em&gt; for Ruby. We are instead asked to absorb good style from others who have good style. But who has good style? Matz is nice so we always raise exceptions in unsuccessful calls to methods ending in a bang‽ Unfortunately these kinds of decisions are easy — what isn&amp;rsquo;t so easy is to know when a class is too big, you&amp;rsquo;ve chosen poor names, or exactly how much meta-programming is too much. To make it worse, each of these decisions change over time as the taste of the Ruby community evolves. Style guides are often tied to specific organizations and people, not to the Ruby community itself.&lt;/p&gt;

&lt;p&gt;Cool.&lt;/p&gt;

&lt;p&gt;This may explain why I was overcome with a feeling of jealousy the first time I read &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0020/&quot;&gt;The Zen of Python&lt;/a&gt;. I&amp;rsquo;m not usually one to get into &lt;strike&gt;religious&lt;/strike&gt; &lt;ins&gt;programming language&lt;/ins&gt; wars, but by science — I was &lt;em&gt;into&lt;/em&gt; this idea. Here&amp;rsquo;s a taste:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beautiful is better than ugly.&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit.&lt;/li&gt;
&lt;li&gt;Simple is better than complex.&lt;/li&gt;
&lt;li&gt;Complex is better than complicated.&lt;/li&gt;
&lt;li&gt;Flat is better than nested.&lt;/li&gt;
&lt;li&gt;Sparse is better than dense.&lt;/li&gt;
&lt;li&gt;Readability counts.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;They were answers to &lt;em&gt;why did you do X&lt;/em&gt;? And they were shared by, and created for the Python community. And I loved it. (Don&amp;rsquo;t even get me started about how fantastic the introspectional &lt;code&gt;import this&lt;/code&gt; is.)&lt;/p&gt;

&lt;h2&gt;The Zen of GitHub&lt;/h2&gt;

&lt;p&gt;So I stole the idea. It felt like the perfect medium to communicate taste. I spent about a week writing down ideas and curating a list I was happy with. There was no scientific process to this. Instead, a purposeful effort to distill the thousands of feelings in my gut about building products I&amp;rsquo;d developed over the years. After writing it down, I asked myself if I &lt;em&gt;really&lt;/em&gt; believed in it. The ones I did, I kept, the ones I didn&amp;rsquo;t, I threw away.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive is better than fast.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not fully shipped until it&amp;rsquo;s fast.&lt;/li&gt;
&lt;li&gt;Anything added dilutes everything else.&lt;/li&gt;
&lt;li&gt;Practicality beats purity.&lt;/li&gt;
&lt;li&gt;Approachable is better than simple.&lt;/li&gt;
&lt;li&gt;Mind your words, they are important.&lt;/li&gt;
&lt;li&gt;Speak like a human.&lt;/li&gt;
&lt;li&gt;Half measures are as bad as nothing at all.&lt;/li&gt;
&lt;li&gt;Encourage flow.&lt;/li&gt;
&lt;li&gt;Non-blocking is better than blocking.&lt;/li&gt;
&lt;li&gt;Favor focus over features.&lt;/li&gt;
&lt;li&gt;Avoid administrative distraction.&lt;/li&gt;
&lt;li&gt;Design for failure.&lt;/li&gt;
&lt;li&gt;Keep it logically awesome.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I presented these in two ways: as part of a presentation given at our semi-annual product development summit (where I elaborated on each point) and as a pull request in our codebase.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://assets.warpspire.com/images/zen/zen.jpg&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Committing the zen to our codebase was important. It made them ours, not mine. It made them malleable, not forever. It made them the responsibility of the whole product development group, not just people who labeled themselves designers.&lt;/p&gt;

&lt;p&gt;And most importantly, &lt;strong&gt;it was written down&lt;/strong&gt;. A lot of leaders try to communicate through speeches and meetings, but this is a mistake in fast growing organizations. Written words anchor better in fast moving environments. Written words read the same as they were authored. Written words can be revised, edited, and changed. Written words are the best.&lt;/p&gt;

&lt;p&gt;But keep it short — because everything added dilutes everything else.&lt;/p&gt;

&lt;h2&gt;Onward and inward&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
               MMM.           .MMM
               MMMMMMMMMMMMMMMMMMM
               MMMMMMMMMMMMMMMMMMM      ____________________________
              MMMMMMMMMMMMMMMMMMMMM    |                            |
             MMMMMMMMMMMMMMMMMMMMMMM   | Keep it logically awesome. |
            MMMMMMMMMMMMMMMMMMMMMMMM   |_   ________________________|
            MMMM::- -:::::::- -::MMMM    |/
             MM~:~   ~:::::~   ~:~MM
        .. MMMMM::. .:::+:::. .::MMMMM ..
              .MM::::: ._. :::::MM.
                 MMMM;:::::;MMMM
          -MM        MMMMMMM
          ^  M+     MMMMMMMMM
              MMMMMMM MM MM MM
                   MM MM MM MM
                   MM MM MM MM
                .~~MM~MM~MM~MM~~.
             ~~~~MM:~MM~~~MM~:MM~~~~
            ~~~~~~==~==~~~==~==~~~~~~
             ~~~~~~==~==~==~==~~~~~~
                 :~==~==~==~==~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s often hard to know how much your words are hitting home as a leader. People always listen, but you&amp;rsquo;re literally paying them for that privilege. The gap between listening and believing is the hard part.&lt;/p&gt;

&lt;p&gt;Which is why it made me so happy to see the zen spread. At first, in small design discussions. Then in our &lt;a href=&quot;https://api.github.com/zen&quot;&gt;api&lt;/a&gt;. And in &lt;code&gt;Hubot zen me&lt;/code&gt;. And then in wallpapers for our desktops.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://assets.warpspire.com/images/zen/wallpapers.jpg&quot; /&gt;
&lt;small&gt;Wallpapers by &lt;a href=&quot;http://cobyism.com&quot;&gt;Coby Chapple&lt;/a&gt; (&lt;a href=&quot;http://assets.warpspire.com/images/zen/GitHub%20Zen%20Wallpapers.zip&quot;&gt;Wallpapers.zip&lt;/a&gt;)&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Pretty soon it wasn&amp;rsquo;t just a presentation I gave or a file I committed. It was The Zen of GitHub. A thing by itself, free to be &lt;a href=&quot;https://api.github.com/octocat&quot;&gt;made fun of and celebrated&lt;/a&gt; all at once. And that&amp;rsquo;s pretty cool.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Design is a hard job. No matter how much we love our work, some will always hate it (and they&amp;rsquo;ll &lt;em&gt;always&lt;/em&gt; let us know). Things change so fast, we&amp;rsquo;re lucky if what we designed a year ago still exists today. It can be really difficult to be proud of our work.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m proud of The Zen of GitHub. I hope it lasts. I hope it changes. And I hope that perhaps, a decade from now, people will think of GitHub as an organization with taste. And perhaps when asked what that means, they&amp;rsquo;ll have a better answer than original ideas and culture.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ego</title>
   
     <link href="http://warpspire.com/blog/ego" />
   
   <updated>2014-09-04T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/ego</id>
   <content type="html">&lt;p&gt;I remember the first time Bitbucket straight up stole one of my designs. The layout. The borders. The shadows. The exact information on the page!&lt;/p&gt;

&lt;p&gt;I was angry.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;my&lt;/em&gt; design. I was the one who put in the time. I spent the hours in a dark room with all the stuff that &lt;em&gt;could&lt;/em&gt; be until I had the stuff that &lt;em&gt;should&lt;/em&gt; be. I was the one who designed five wrong iterations until I got the right one. And it was good. People loved it. And these — these &lt;em&gt;barbarians&lt;/em&gt; just stole it. Every last bit.&lt;/p&gt;

&lt;p&gt;I was real angry. I wanted to start a scene. I wanted to get real angry, real public.&lt;/p&gt;

&lt;p&gt;But my customers didn&amp;rsquo;t care. They didn&amp;rsquo;t even notice.&lt;/p&gt;

&lt;p&gt;Because they were &lt;em&gt;my&lt;/em&gt; customers. They loved it. They were happy. They got something nice to use. Customers love that shit. They eat it up. Nice to use? &lt;em&gt;Into it.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ego is such a hard thing. I struggle with it constantly. I struggle with it right now as I&amp;rsquo;m writing this. I know at my core that when I design software, the most important thing to me is that people are pleased — that they like using my product and it makes their life a little bit better. And I know — &lt;em&gt;I know&lt;/em&gt; — that has everything to do with the product, and nothing to do with me.&lt;/p&gt;

&lt;p&gt;But here I am. And I want it to be about me.&lt;/p&gt;

&lt;p&gt;And to be honest, that&amp;rsquo;s still the hardest thing about designing products. &lt;em&gt;Design is a job.&lt;/em&gt; If I want people to celebrate me, this isn&amp;rsquo;t the career. My job is to make good shit that people like. And there isn&amp;rsquo;t room for me in that equation.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s the product.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s the team.&lt;/p&gt;

&lt;p&gt;But more than anything else — there&amp;rsquo;s the customers.&lt;/p&gt;

&lt;p&gt;Those people who make products real. Real life humans with emotions and opinions and happiness and sadness and money. Money that puts food on my table.&lt;/p&gt;

&lt;p&gt;So you know, I have to remind myself: it&amp;rsquo;s about them. It&amp;rsquo;s about the customers. It&amp;rsquo;s not about me.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Product: compassion strong enough to ignore your selfish desires in order to build something for someone else.&lt;/p&gt;&amp;mdash; Kyle Neath (@kneath) &lt;a href=&quot;https://twitter.com/kneath/status/425100294809059328&quot;&gt;January 20, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;p&gt;Tomorrow — I&amp;rsquo;ll be a customer. And then it can be about me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What about Bitbucket&amp;rsquo;s customers? They liked it too. It made their day a little bit better.&lt;/p&gt;

&lt;p&gt;Because of me. I made even more people happy.&lt;/p&gt;

&lt;p&gt;But I didn&amp;rsquo;t get to own that. You know? That&amp;rsquo;s still hard. But in the long run it&amp;rsquo;s a good thing. Because it doesn&amp;rsquo;t matter if I owned it or not. I made something good that people enjoyed. Even more people than usual.&lt;/p&gt;

&lt;p&gt;The team that stole my layout? They&amp;rsquo;re probably good people too. They were thinking about their customers. Not Kyle Neath.&lt;/p&gt;

&lt;p&gt;And then someone else redesigned the page. And made it even better.&lt;/p&gt;

&lt;p&gt;All without me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tweet Tweet</title>
   
     <link href="http://warpspire.com/blog/tweet-tweet" />
   
   <updated>2014-08-23T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/tweet-tweet</id>
   <content type="html">&lt;p&gt;As I sit in my apartment right now, I&amp;rsquo;m assuming what is effectively the entirety of the technology industry is managing the task rabbits packing their art cars, private chefs, fusion reactors, and backup iPads into their U-Hauls for the long journey to the Black Rock Desert. Oh — and drugs — lots, and lots of drugs. I mean, do you even &lt;em&gt;know&lt;/em&gt; of Steve Jobs?&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; lang=&quot;en&quot;&gt;&lt;p&gt;*Scene: It&amp;#39;s Second Breakfast time at Twitter HQ. A 23y.o. lies on the innovation hammock, is hand-fed scallops wrapped in larger scallops.*&lt;/p&gt;&amp;mdash; Tom Gara (@tomgara) &lt;a href=&quot;https://twitter.com/tomgara/statuses/501189840994828288&quot;&gt;August 18, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;In the industry, we have this phrase — &lt;em&gt;ship early, ship often&lt;/em&gt; — it&amp;rsquo;s a great little hack we&amp;rsquo;ve developed to avoid taking any real responsibility for our decisions. If we&amp;rsquo;re doing it fast, we&amp;rsquo;re trying to fuck up. Get it? We&amp;rsquo;re &lt;em&gt;trying&lt;/em&gt; to do a bad job. No? Well, normal people won&amp;rsquo;t ever understand tech, and like I said the important part is drugs. Quite frankly, that DMT isn&amp;rsquo;t going to trip itself, and it&amp;rsquo;s important to make sure you&amp;rsquo;re not rolling up to the desert with a bag of duds. &lt;em&gt;Ship early, ship often.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Suddenly he sits upright, slaps away the feeding hand. &amp;quot;What if favorites *were* retweets?&amp;quot;, he mutters.&lt;/p&gt;&amp;mdash; Tom Gara (@tomgara) &lt;a href=&quot;https://twitter.com/tomgara/statuses/501190140153569280&quot;&gt;August 18, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;So anyways, I got this call from my product manager at 8pm last night, and all I can hear is some dog screaming in the background and what sounds like The Sopranos playing on an iPad. This shit is a little too deep for me right now, so I hang up and get back to work. But the dude won&amp;rsquo;t stop, and somehow he&amp;rsquo;s rigged his phone to send a picture of this goat to me every 15 seconds.&lt;/p&gt;

&lt;p&gt;Which is why I&amp;rsquo;m pretty fucking surprised that somehow &lt;em&gt;I&amp;rsquo;m in a goddamn Google Hangout with him at 3am on a Tuesday night&lt;/em&gt;. He&amp;rsquo;s sitting there, and I swear the fucker is &lt;em&gt;glowing&lt;/em&gt; — but it&amp;rsquo;s not like a supernatural light — I think he painted himself in glow in the dark paint or something because it just looks really bad and it&amp;rsquo;s all over his dog too (who does &lt;em&gt;not&lt;/em&gt; seem very chill about this whole situation). While I&amp;rsquo;m sitting here watching this performance art, I start to wonder if this shit really is for me, and suddenly all I hear is screaming.&lt;/p&gt;

&lt;p&gt;Dude is &lt;em&gt;not&lt;/em&gt; happy. Guess he&amp;rsquo;s angry that I sorta zoned out after the first twenty minutes and fired up another LoL match. Dude just keeps getting louder and louder, &amp;ldquo;It&amp;rsquo;s all just a comment. A COMMENT. I SEE IT NOW. EVERYTHING IS A COMMENT.&amp;rdquo; We don&amp;rsquo;t even have comments on our site, what the fuck dude? Right around the time he pulls out a box of matches, I decide this shit is &lt;em&gt;not&lt;/em&gt; for me and close my laptop. Most people just don&amp;rsquo;t get how hard this job is. &lt;em&gt;Fuck&lt;/em&gt;, dude.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p&gt;The in-house studio audience paid to give emotional affirmation to Twitter employees breaks into rapturous applause. They stand, some cry.&lt;/p&gt;&amp;mdash; Tom Gara (@tomgara) &lt;a href=&quot;https://twitter.com/tomgara/statuses/501190317673291778&quot;&gt;August 18, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;This whole thing kinda fucked me up, so I took a few Ambien to knock me out. Apparently, product manager dude did not.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;From: Dude&lt;br/&gt;
To: All&lt;br/&gt;
Cc: Kyle&lt;br/&gt;
Subject: Important All-Hands Meeting&lt;/p&gt;

&lt;p&gt;Fellow Employioneers,&lt;/p&gt;

&lt;p&gt;I have some news. Kyle and I have figured it out. 3pm at the food trucks. You won&amp;rsquo;t want to miss this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool. Except I have no idea what we&amp;rsquo;ve figured out at all. All I can remember is something about comments. Suuuuuper unclear. So when we get to the food trucks, he just walks up and give me the biggest bear hug ever (and I think he smells like burned plastic?). No idea how, but I am &lt;em&gt;definitely&lt;/em&gt; on his good side. This isn&amp;rsquo;t going to go like last month&amp;rsquo;s all-hands when we turned the site blue.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Comments.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all he says. He just sits down, smiles at me, and snaps a piece of pork belly off his truffle fries. I&amp;rsquo;m so nervous I go through eight eel tacos and some BBQ&amp;rsquo;d snow leopard just so I don&amp;rsquo;t have to say anything. Meanwhile, dude just grins at me the whole meal. Real uncomfortable. We all start walking back to the office, and I&amp;rsquo;m pretty sure cute-co-worker-in-the-corner is about to puke from the anxiety. Product manager dude looks over at me and breaks what can only be described as the most uncomfortable silence I&amp;rsquo;ve ever experienced, &amp;ldquo;Profound, right?&amp;rdquo; Fuck. What do I say? Do I ask him if he&amp;rsquo;s still high? &amp;ldquo;Totally,&amp;rdquo; I respond. Play it cool. Play it cool. &amp;ldquo;Damn right!&amp;rdquo; he exclaims and slaps my back.&lt;/p&gt;

&lt;p&gt;When we get back to the office, he breaks the silence agian, &amp;ldquo;Thank you all for coming. Kyle&amp;rsquo;s got this — follow his lead. Let&amp;rsquo;s see where we are by tomorrow morning.&amp;rdquo; &lt;em&gt;Motherfucker!&lt;/em&gt; I&amp;rsquo;m freaking out, so I tell everyone I need ten minutes to pull together my thoughts. I open up my email and start furiously scanning the messages he sent me last night. Thankfully, there&amp;rsquo;s eighteen emails labeled &amp;lsquo;COMMENT&amp;rsquo; so I&amp;rsquo;m starting to think there&amp;rsquo;s hope. The first twelve are doge pictures, but the thirteenth finally bears some fruit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I keep going through these emails and I&amp;rsquo;m starting to get it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Friend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The seventeenth email is when it finally hits me like a ton of bricks.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommentComment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fuck. I&amp;rsquo;ve just agreed to replace everything in our site with comments. I mean, we joked about this, but &lt;em&gt;he cannot be real&lt;/em&gt;. Just one polymorphic inheritable database table of comments, all pointing to each other and joining through each other.&lt;/p&gt;

&lt;p&gt;Just then I realize that&amp;rsquo;s what &lt;em&gt;I&lt;/em&gt; want us to do. &lt;em&gt;Kyle&amp;rsquo;s got this&lt;/em&gt;, that&amp;rsquo;s what he said.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-conversation=&quot;none&quot; lang=&quot;en&quot;&gt;&lt;p&gt;A trapdoor in the ceiling opens, drenching him with cash and stock. An enormous dubstep bass line drops, the entire office parties for days.&lt;/p&gt;&amp;mdash; Tom Gara (@tomgara) &lt;a href=&quot;https://twitter.com/tomgara/statuses/501190598398070784&quot;&gt;August 18, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;Well, as they say — &lt;em&gt;so it goes&lt;/em&gt;. Comments, here we come baby! That eighteenth email, by the way?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;From: Dude&lt;br/&gt;
To: Kyle&lt;br/&gt;
Subject: COMMENT&lt;/p&gt;

&lt;p&gt;But only SOMETIMES&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not quite sure what to do with that one, but cute-co-worker-in-the-corner just rolled up to my desk so I&amp;rsquo;m just gonna go with what I have for now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This post is full of satire and absurdity (sometimes I just like to write because it&amp;rsquo;s fun — also that tweet series was hilarious), but I do kind of miss when Twitter was deterministic and didn&amp;rsquo;t take psychedelic drugs to explain what the difference between a Favorite and a Retweet was. Chalk it up to another piece of software I have to explain with &amp;ldquo;you&amp;rsquo;re not dumb, this shit is just confusing, even to me.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And shoutout to &lt;a href=&quot;https://twitter.com/court3nay&quot;&gt;@court3nay&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/technoweenie&quot;&gt;@technoweenie&lt;/a&gt; for the CommentComment joke. STI, it&amp;rsquo;s one hell of a drug.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cranking</title>
   
     <link href="http://www.43folders.com/2011/04/22/cranking" />
   
   <updated>2014-08-10T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-cranking</id>
   <content type="html">&lt;p&gt;Merlin Mann in 2011:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&amp;rsquo;s now become unavoidably clear to me that I&amp;rsquo;ve been doing each of these things poorly. The job, the making, the pleasing, and, yeah, the being at home. And I can&amp;rsquo;t live with that for another day. So, I&amp;rsquo;ve chosen which one has to go. At least in the way it&amp;rsquo;s worked to date. Which is to say &lt;em&gt;not&lt;/em&gt; working.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;But, that part&amp;rsquo;s gone missing for just a little too long now. Certainly not missing from my handsome and very practical rhetoric&amp;ndash;it&amp;rsquo;s been missing from my actual life and living. In a quest to make something that has increasingly not felt like my own, I&amp;rsquo;ve unintentionally ignored my own counsel to never let your hard work fuck up the good things. Including those regular people. Including, ironically, the real work. Including any good thing the crank is supposed to be attached to.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;m done fucking that up. I&amp;rsquo;m done cranking. And, I&amp;rsquo;m ready to make a change.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I just found this old article from Merlin, and having recently made some pretty big changes in my own life, it sure hit pretty hard. For me? I&amp;rsquo;m done cranking for a while, too. I don&amp;rsquo;t really know what that looks like, but I&amp;rsquo;m excited to find out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hit the Reset Button in Your Brain</title>
   
     <link href="http://www.nytimes.com/2014/08/10/opinion/sunday/hit-the-reset-button-in-your-brain.html?_r=0" />
   
   <updated>2014-08-10T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-attention</id>
   <content type="html">&lt;p&gt;Daniel J. Levitin for the Sunday Review:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Our brains have two dominant modes of attention: the task-positive network and the task-negative network. The task-positive network is active when you’re actively engaged in a task, focused on it, and undistracted. The task-negative network is active when your mind is wandering. These two attentional networks operate like a seesaw in the brain: when one is active the other is not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I love this explanation. I often find myself arguing for the power of &lt;em&gt;not&lt;/em&gt; (as in, spending time purposefully not accomplishing tasks). American culture does not like this. It wants us to go faster, do more, always be &lt;em&gt;on&lt;/em&gt; (why aren&amp;rsquo;t you responding to my text message???). As a creative professional, this pressure can be suffocating and damaging, especially as an organization grows. The worst part? I don&amp;rsquo;t think any of us really want to be this way.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we can train ourselves to take regular vacations — true vacations without work — and to set aside time for naps and contemplation, we will be in a more powerful position to start solving some of the world’s big problems. And to be happier and well rested while we’re doing it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;d also add a vacation from social media. Take a break from your text messages, your Facebook feed, your Twitter feed, and your Instagram feed. Phone vacations are a real thing, and something we&amp;rsquo;re all going to have to master in our ever-connected world.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Investors of Secret: I have a favor to ask</title>
   
     <link href="http://warpspire.com/blog/secret" />
   
   <updated>2014-08-06T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/secret</id>
   <content type="html">&lt;p&gt;It&amp;rsquo;s &lt;a href=&quot;https://twitter.com/kneath/status/496337719555940352&quot;&gt;no secret&lt;/a&gt; that I dislike &lt;a href=&quot;https://www.secret.ly/&quot;&gt;Secret&lt;/a&gt;. Just this week I had a crisis of existence when I found myself &lt;a href=&quot;http://pando.com/2014/07/31/investors-have-to-stop-trying-to-justify-the-lies-and-libel-of-secret/&quot;&gt;agreeing with Sarah Lacy on the topic&lt;/a&gt;. Many of my friends have suffered severe emotional damage as a result of defamations posted on the service: it&amp;rsquo;s not pretty. But more importantly, it seems clear to me this is only the start. You see, I agree with Sarah that Secret will take lives. Not directly, of course. But perhaps in the hands of a bullying teen picking on a severely depressed peer. And maybe that post — that secret, that was the last thing, the thing that made them decide they could no longer stand the world, and led to them taking their life. Their suicide probably would have happened with or without Secret — but I know that Secret will be cited as the last straw for suicides if it continues to grow. It&amp;rsquo;s about as guaranteed as teens using Snapchat to send nude pictures to each other. &lt;a href=&quot;http://nypost.com/2014/06/29/teen-sues-boy-over-nude-snapchat-spread-on-social-media/&quot;&gt;Good thing that can&amp;rsquo;t happen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wonder if they&amp;rsquo;ll publish their suicide note on Secret too?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I admit that this is an &lt;em&gt;opinion&lt;/em&gt;, and a fairly hyperbolic one at that. Secret&amp;rsquo;s champions claim the service will overcome the darker nature of humans with technology and moderation. It&amp;rsquo;s completely possible that they will be able to solve this problem. But if the history of online message boards has anything to say, at minimum, this will be an incredibly difficult task (disproving the standard model of the &lt;a href=&quot;http://www.penny-arcade.com/comic/2004/03/19&quot;&gt;greater internet fuckwad theory&lt;/a&gt;). Still, I do admit it is possible. After all, it&amp;rsquo;s important to take risks to move forward.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;risk&lt;/em&gt; — incur the chance of unfortunate consequences by engaging in (an action)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can risk many things in life. You can risk your health by climbing a mountain, risk a friendship by revealing a secret, or risk over-cooking your steak by leaving it on the grill in search of the perfect sear. We usually talk about this in terms of risk/reward. What are you willing to risk to claim a given potential reward? Investors most often risk &lt;em&gt;money&lt;/em&gt; for &lt;em&gt;more money&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;The risk of funding Secret&lt;/h2&gt;

&lt;p&gt;It is possible that Secret may overcome all challenges and become an service of support, transparency, and community. It is also possible that Secret may have unfortunate consequences, which is how we quantify risk.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Secret may become a tool for &lt;a href=&quot;http://www.stopbullying.gov/&quot;&gt;bullying&lt;/a&gt; (specifically &lt;a href=&quot;http://www.stopbullying.gov/cyberbullying/index.html&quot;&gt;cyerbullying&lt;/a&gt;), supporting one of the least desirable human behaviors known in our society.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secret may become a tool for libel and defamation, spreading damaging false information about people.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In fact, Secret has already suffered from these problems, and is already an established tool for bullying and libel. &lt;em&gt;Okay, so what? So what if it&amp;rsquo;s a tool for bullying and libel? What of it?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bullying causes depression and anxiety, increased feelings of sadness and loneliness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Defamation of character can harm people&amp;rsquo;s reputation, costing them personally, professionally, and financially. Defamation often also causes mental and physical anguish.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In rare cases, a small fraction of those bullied retaliate through extremely violent measures (ex: in 12 of 15 school shootings in the 1990s, the shooters had a history of being bullied).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bullying sucks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Defamation sucks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The most notable theme across all of these effects is the &lt;strong&gt;anguish and suffering of human beings&lt;/strong&gt;. This is the most important potential consequence of Secret (and if you ask me &amp;amp; Occam&amp;rsquo;s razor, pretty fucking likely).&lt;/p&gt;

&lt;p&gt;And what happens &lt;del&gt;if&lt;/del&gt; &lt;ins&gt;when&lt;/ins&gt; Secret gets compromised and all those secrets… aren&amp;rsquo;t? What happens when a Secret employee feels a little curious and starts looking into who authored that juicy post? All of these scenarios are likely, and would result in even worse bullying and defamation.&lt;/p&gt;

&lt;p&gt;By my moral compass, this risk is far too high. I&amp;rsquo;m not comfortable ruining anyone&amp;rsquo;s life, even if they&amp;rsquo;re a minority of &amp;ldquo;unintended usage&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;A favor&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;re risking our well-being for a couple of bucks — will you do us a favor in return? &lt;strong&gt;I am asking you, the investors of Secret, to raise $25 million USD for &lt;a href=&quot;http://www.theoceancleanup.com/&quot;&gt;The Ocean Cleanup&lt;/a&gt;&lt;/strong&gt; (the amount of money in Secret&amp;rsquo;s last round of funding). I have personally donated to the project, and I would love to see the pilot realized. He&amp;rsquo;s only asking for $2M, but I&amp;rsquo;d love to see what he could do with $25M. Because even if this attempt doesn&amp;rsquo;t work, it&amp;rsquo;s become clear to me that Boyan has the passion required to keep at this problem.&lt;/p&gt;

&lt;p&gt;By funding Secret, you seem comfortable risking the anguish and suffering of human beings for the potential of more money, so you must have a lot of extra money you don&amp;rsquo;t care about. This is why I think it&amp;rsquo;s fair to ask you to risk some of your money for potentially cleaner oceans and a healthier planet in return. I know you see money differently than we do. You have lots of it, and you can always make more — it&amp;rsquo;s a game to be played. And I understand that VCs are rarely &lt;em&gt;personally&lt;/em&gt; funding companies — but I&amp;rsquo;m asking you to use your fundraising skills to get Boyan the funding he deserves. Raising money is your expertise, and you&amp;rsquo;re really good at it.&lt;/p&gt;

&lt;p&gt;Besides, wouldn&amp;rsquo;t it be cool to see a new type of business succeed — one that profits from improving the environment? If I was a person interested in creating new businesses, I&amp;rsquo;d think it would be pretty cool.&lt;/p&gt;

&lt;p&gt;Maybe you won&amp;rsquo;t do it. Maybe you can&amp;rsquo;t do it. I&amp;rsquo;m not sure, but I need to ask. I&amp;rsquo;m saddened to see people like you give money to companies that risk human well-being while we ignore the planet we&amp;rsquo;re killing around us. It seems you&amp;rsquo;d rather risk the anguish of humans just to earn some money. Money that could be used to invest in the health of our world. And I can&amp;rsquo;t believe that&amp;rsquo;s true. I believe you know the impact of your funding and care that your work really does contribute to society in a positive manner.&lt;/p&gt;

&lt;p&gt;Can we try something cool?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re a product designer reading this, consider watching Mike Monteiro&amp;rsquo;s excellent &lt;a href=&quot;http://vimeo.com/68470326&quot;&gt;How Designers Destroyed the World&lt;/a&gt; talk from Webstock. This is me speaking up.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Asmiov on style</title>
   
     <link href="http://en.wikipedia.org/wiki/Isaac_Asimov#cite_ref-Nemesis-Authour.27s_note_68-0" />
   
   <updated>2014-07-03T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/asimov-writing-style</id>
   <content type="html">&lt;p&gt;Isaac Asimov on his writing style:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I made up my mind long ago to follow one cardinal rule in all my writing—to be &amp;lsquo;clear&amp;rsquo;. I have given up all thought of writing poetically or symbolically or experimentally, or in any of the other modes that might (if I were good enough) get me a Pulitzer prize. I would write merely clearly and in this way establish a warm relationship between myself and my readers, and the professional critics—Well, they can do whatever they wish.&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>The Ocean Cleanup</title>
   
     <link href="http://www.theoceancleanup.com/" />
   
   <updated>2014-06-21T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-ocean-cleanup</id>
   <content type="html">&lt;p&gt;Last year, I watched Boyan Slat give a TEDx talk on the subject of plastics in our ocean: &lt;a href=&quot;https://www.youtube.com/watch?v=ROW9F-c0kIQ&quot;&gt;How the oceans can clean themselves&lt;/a&gt;. The idea was super interesting to me (I love simple solutions), but I had no idea how feasible it would be. On June 3rd, his newly formed foundation &lt;a href=&quot;http://www.theoceancleanup.com/&quot;&gt;The Ocean Cleanup&lt;/a&gt; claimed they&amp;rsquo;ve proven it is indeed feasible.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;re raising $2,000,000 to deploy a large-scale pilot in the next few years. And maybe it won&amp;rsquo;t work — but it sure feels like a no-brainer to donate some money and give them the chance to try.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Internet With A Human Face</title>
   
     <link href="http://idlewords.com/bt14.htm" />
   
   <updated>2014-06-10T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-internet-face</id>
   <content type="html">&lt;p&gt;Maciej Cegłowski, creator of &lt;a href=&quot;https://pinboard.in&quot;&gt;pinboard.in&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&amp;rsquo;ve come to believe that a lot of what&amp;rsquo;s wrong with the Internet has to do with memory. The Internet somehow contrives to remember too much and too little at the same time, and it maps poorly on our concepts of how memory should work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I can&amp;rsquo;t  begin to explain how insightful and important this phrase is. We&amp;rsquo;ve been lazy. We haven&amp;rsquo;t treated backups, privacy, security, and data portability seriously enough as creators of software. It&amp;rsquo;s time we do.&lt;/p&gt;

&lt;p&gt;If you build software for the web, you need to read the whole presentation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Claude Shannon on accepting the Kyoto Prize</title>
   
     <link href="http://www.inamori-f.or.jp/laureates/K01_b_claude/img/lct_e.pdf" />
   
   <updated>2014-06-01T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-claude-shannon</id>
   <content type="html">&lt;p&gt;Claude Shannon, inventor of information theory:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don’t know how history is taught here in Japan, but in the United States in my college days, most of the time was spent on the study of political leaders and wars—Caesars, Napoleons, and Hitlers. I think this is totally wrong. The important people and events of history are the thinkers and innovators, the Darwins, Newtons, Beethovens whose work continues to grow in influence in a positive fashion.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The more I learn of Claude Shannon, the more I like this guy. This is the future I want to build. The &lt;a href=&quot;http://www.inamori-f.or.jp/laureates/K01_b_claude/img/lct_e.pdf&quot;&gt;entire speech&lt;/a&gt; is worth a read.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Revenge of the Nerds</title>
   
     <link href="http://kottke.org/14/05/the-revenge-of-the-nerds" />
   
   <updated>2014-05-24T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-nerd-web</id>
   <content type="html">&lt;p&gt;Kottke, commenting on Steven Frank&amp;rsquo;s &lt;a href=&quot;http://stevenf.com/2014/05/21/arcade-story/&quot;&gt;Dragon Lair story&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The web has since been overrun by marketers, money, and big business, but for a brief time, the nerds of the world had millions of people gathered around them, boggling at their skill with this seemingly infinite medium. That time has come and gone, my friend.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And with two sentences, Kottke summarizes the feelings that have been welling up in me for the past four years. It&amp;rsquo;s a new world.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Anonymity: Lessons learned building an anonymous social network</title>
   
     <link href="https://medium.com/p/f7461ba821c8" />
   
   <updated>2014-02-26T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-anonymous</id>
   <content type="html">&lt;p&gt;Some great thoughts regarding the history of Formspring and purposefully designing an anonymous experience. I love this bit:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Investors will pass on your company, peers will criticize you, parents will yell at you. Maybe they’re right. And maybe not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s so true. I&amp;rsquo;ve always considered people who visit GitHub in a logged out state to be a different type of customer — but a customer all the same. Every time I&amp;rsquo;ve brought up this idea to people outside of GitHub, it&amp;rsquo;s been met with a strange astonishment and a scolding for not sending them through the signup flow meat grinder ASAP.&lt;/p&gt;

&lt;p&gt;Anonymous can be a part of your product. Design it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The bug in Gmail that fixed itself</title>
   
     <link href="http://googleblog.blogspot.com/2014/01/todays-outage-for-several-google.html" />
   
   <updated>2014-01-25T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-self-fixing-bug</id>
   <content type="html">&lt;p&gt;A couple of years ago I listened to &lt;a href=&quot;http://www.allthingsdistributed.com/&quot;&gt;Werner Vogels&lt;/a&gt; talk a bit about treating large computing systems like biological systems. We shouldn&amp;rsquo;t try and stop the virus — the predator — instead, we should design systems that can provide self-correcting forces against contaminated systems. Preventing failures and bugs was futile.&lt;/p&gt;

&lt;p&gt;You may gather from my surprise that I&amp;rsquo;m not a distributed systems engineer — but the idea of accepting that you will purposefully allow bugs that will cause failure was kind of mind blowing. Before then, my mindset had always been to prevent bugs to prevent failure. I had a similar feeling when I first watched &lt;a href=&quot;https://twitter.com/d2fn&quot;&gt;Dietrich Featherston&lt;/a&gt; talk about &lt;a href=&quot;http://vimeo.com/52398797&quot;&gt;Radiology + Distributed Systems&lt;/a&gt; — a similarly alternate perspective on monitoring and measurement.&lt;/p&gt;

&lt;p&gt;And so it made me incredibly happy to read this bit from Google&amp;rsquo;s post-mortem of Gmail&amp;rsquo;s outage:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Engineers were still debugging 12 minutes later when the same system, having automatically cleared the original error, generated a new correct configuration at 11:14 a.m. and began sending it; errors subsided rapidly starting at this time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The system was able to fix the bug faster than the engineers. This isn&amp;rsquo;t anything revolutionary or mind blowing. But it&amp;rsquo;s kind of awesome to see it &lt;em&gt;succeed&lt;/em&gt; in the real world.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bullshit Overlays</title>
   
     <link href="http://bradfrostweb.com/blog/post/bullshit-overlays/" />
   
   <updated>2014-01-06T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-overlays</id>
   <content type="html">&lt;p&gt;Brad Frost with some real talk:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I’m sure they’re effective.&lt;/p&gt;

&lt;p&gt;And I could get people on the street to take my survey by threatening them with a claw hammer. That would be pretty effective too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you use an overlay, you&amp;rsquo;re an asshole. Stop.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Software Quality and Building a Better Evernote in 2014</title>
   
     <link href="http://blog.evernote.com/blog/2014/01/04/on-software-quality/" />
   
   <updated>2014-01-05T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-evernote-quality</id>
   <content type="html">&lt;p&gt;It&amp;rsquo;s hard to admit you&amp;rsquo;ve made a massive strategic mistake in your company. Kudos to Evernote for facing quality issue head on.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s to brighter, higher-quality future.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Product</title>
   
     <link href="http://warpspire.com/blog/product" />
   
   <updated>2014-01-03T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/product</id>
   <content type="html">&lt;p&gt;Marc Andreessen was the first to coin the phrase: &lt;em&gt;&lt;a href=&quot;http://online.wsj.com/news/articles/SB10001424053111903480904576512250915629460&quot;&gt;software is eating the world&lt;/a&gt;&lt;/em&gt;. And I tend to agree with him — no phrase defines our time more so than this one. More and more companies are powered by and create software. More and more &lt;em&gt;people&lt;/em&gt; are creating software. Software is everywhere — plugged into our cars, our bikes, stuffed in our pockets, embedded in our TVs, and controlling a vast majority of the world we&amp;rsquo;ve created.&lt;/p&gt;

&lt;p&gt;Yet I find myself wondering: what &lt;em&gt;kind&lt;/em&gt; of software is eating the world?&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/product/wsj.jpg&quot;&gt;
  &lt;small&gt;Does the software that Wall Street Journal uses advance journalism and better inform the public?&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Caught up in a race for money and fame, we lost our focus on the important. We talk of venture capital, recruiting tactics, dreams of disrupting industries, stock options, growth hacks, and the superiority of our tools. We do not talk of the bugs, the quirks, the difficulties of using our creations, the exploitation of the public, or the worst secret of all: software is broken, we are responsible, and we&amp;rsquo;re making a lot of money off it.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve become obsessed with process and tools. We&amp;rsquo;ve stopped caring about the product.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Product is the reason that I build software. I want to create things that bring people joy. I want to build things I can be proud of. Things that makes the world a better place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can&amp;rsquo;t argue against pageviews — people want this. It may be slimy, but it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I look around at software today and I wouldn&amp;rsquo;t be proud of it. Most software is frustrating, broken, and in all honesty, a disservice to humanity.  I would be ashamed to be associated with the vast majority of software that exists today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeah, but he made a $20M exit, it must have been a decent product.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t have to be this way. We can stop listening to the venture capitalists seeking a payout. We can stop listening to our colleagues who are driven by a desire for fame. We can build sustainable businesses that are not based on advertising and exploitation of other humans. We can care about building good product. We can care about the things that matter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focus on results over process&lt;/li&gt;
&lt;li&gt;Bring users joy&lt;/li&gt;
&lt;li&gt;Build something you are proud of&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We can do these things, and we can do them in the real world — the same money fueled kinda shitty world that we all exist in. The real world with all of it&amp;rsquo;s seven billion imperfect humans.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That was Mica&amp;rsquo;s department that put those ads on the site — I hate them, but what are you gonna do? They perform insanely well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can&amp;rsquo;t be afraid of words like &lt;em&gt;revenue&lt;/em&gt;, &lt;em&gt;compensation&lt;/em&gt;, &lt;em&gt;management&lt;/em&gt;, and &lt;em&gt;user satisfaction&lt;/em&gt;. We must remember that there are human beings who use our products. We must stop pursuing vanity metrics. We must remember the other humans — our colleagues — who help us build our products. We cannot be empty cheerleaders nor uninformed critics. We must face our fears and resist the urge to run away under the code to hide.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Organizations which design systems &amp;hellip; are constrained to produce designs which are copies of the communication structures of these organizations&lt;/p&gt;

&lt;p&gt;— Conway&amp;rsquo;s Law&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good product is more than the software. It&amp;rsquo;s managing the humans who build your software. It&amp;rsquo;s managing your investor&amp;rsquo;s expectations. It&amp;rsquo;s ensuring every piece of communication with your customers — blog posts, support responses, meetups, and conferences — are all amazing. It&amp;rsquo;s finding a way to sustain reasonable growth to support a unprofitable company until it can be profitable. It&amp;rsquo;s facing all of our fears dead on and confronting the actual world we live in.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We&amp;rsquo;re getting a lot of pressure from our investors to improve our sales numbers — they&amp;rsquo;ve given us a call list and I&amp;rsquo;d like you to start going through it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is scary, and it&amp;rsquo;s no wonder so many great product minds run away to pixels and code when confronted with the realities of building software. Organizations can be scary monsters when confronted for what they are, and the status quo is a powerful force — a powerful force dead set on delivering shitty software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I didn&amp;rsquo;t want to step on their toes, so I just deleted the sentence and pushed it out. It doesn&amp;rsquo;t make sense, but hey — not my job.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I guess it&amp;rsquo;s not surprising that so much software is terrible. It&amp;rsquo;s easy to be lazy, and it&amp;rsquo;s hard to build good product. But we get &lt;em&gt;paid&lt;/em&gt; to invent the future. The future! That&amp;rsquo;s an incredible opportunity that blows my mind every day.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;&lt;p&gt;“You want to have a future where you’re expecting things to be better, not one where you’re expecting things to be worse.”&lt;/p&gt;

&lt;p&gt;— Elon Musk&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think a lot about what kind of future we could build. About the things people could accomplish with our creations. I have an enormous amount of respect for Elon Musk in this regard — he works every day toward a laser focused mission. He claims three things will impact the future of humanity most:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The internet (a globally connected culture) &lt;strong&gt;Paypal&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Getting off fossil fuels &lt;strong&gt;Solar City, Tesla&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Becoming a multi-planetary civilization &lt;strong&gt;SpaceX&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Where does Buzzfeed fit in here? What about SnapChat, FarmVille, and High Frequency Trading? I&amp;rsquo;m not saying these can&amp;rsquo;t be a source of entertainment or insanely profitable — but they&amp;rsquo;re not good product. They&amp;rsquo;re not making the world a better place.&lt;/p&gt;

&lt;p&gt;We are focused on likes, app opens, hours spent, pageviews, and company valuations — but do these translate to a better future? Are we using ads to provide for a connected humanity, or conning people into conspicuous consumption? It&amp;rsquo;s hard to judge. I do know that it just &lt;em&gt;feels right&lt;/em&gt; when you build a good product.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s really the core of it: how can we create financially sustainable products that bring people joy and make the world a better place?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I&amp;rsquo;ve been thinking a lot about principles of good product. At least, principles that I can feel confident writing about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mind the Humans that use our products&lt;/li&gt;
&lt;li&gt;Metrics used to gauge product success&lt;/li&gt;
&lt;li&gt;Operational systems that allow for good product&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I want to spend more of my time writing about these ideas. More time debating and collaborating on these ideas. And coming up with better ideas so we can all build better things and make a future where we can expect things to get better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://news.layervault.com/stories/12355-product-by-kyle-neath&quot;&gt;Discuss this article on Designer News&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Omakase Charity</title>
   
     <link href="https://omakasecharity.org/m/9c55ut" />
   
   <updated>2013-12-31T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-omakase</id>
   <content type="html">&lt;p&gt;My friend Theresa recently launched a new project — Omakase. The premise is pretty awesome: they pick excellent well-deserving charities, you subscribe at $10, $25, or $50 a month.&lt;/p&gt;

&lt;p&gt;Simple subscription-based giving. My kinda joint.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Photos on Exposure</title>
   
     <link href="https://kneath.exposure.so/" />
   
   <updated>2013-12-11T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-exposure</id>
   <content type="html">&lt;p&gt;The fine folks from &lt;a href=&quot;http://www.elepath.com/&quot;&gt;Elepath&lt;/a&gt; recently launched their newest venture, &lt;a href=&quot;https://exposure.so/&quot;&gt;Exposure&lt;/a&gt;. I don&amp;rsquo;t really tend to pimp services too much, but I &lt;em&gt;really&lt;/em&gt; like Exposure. &lt;a href=&quot;https://kneath.exposure.so/marin&quot;&gt;Here&amp;rsquo;s&lt;/a&gt; a story I published from a recent hike through Marin.&lt;/p&gt;

&lt;p&gt;The combination of words + photo groups is perfect for telling a story. I&amp;rsquo;m looking forward to seeing where they take this.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pixels don’t care</title>
   
     <link href="http://warpspire.com/blog/pixels-dont-care" />
   
   <updated>2013-01-28T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/pixels-dont-care</id>
   <content type="html">&lt;p&gt;I’m short.&lt;/p&gt;

&lt;p&gt;When I was 20, I decided to try and make some extra money building websites for people to pay for my tuition. My work was good. It wasn’t phenomenal, but it was good. It was impossible for me to get work. Everything would be great until I met with a potential client. At which point they told me they’d rather hire a professional.&lt;/p&gt;

&lt;p&gt;What they meant is that I looked too young. I didn’t really realize this was the problem until people started screwing me out of money. “You’re just a kid and you’ll get over it” I believe was the phrase my last client used to fuck me over.&lt;/p&gt;

&lt;p&gt;Humans are really good at prejudice and intolerance.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The internet was a much different place eight years ago. Facebook wasn’t open to the public. Twitter didn’t exist. Google did not require legal names. I was just &lt;strong&gt;kneath&lt;/strong&gt; who had a blog at warpspire.com. I didn’t have a picture and no one knew my age.&lt;/p&gt;

&lt;p&gt;And the internet loved my work. I still remember the first day my blog was featured on CSSVault — it was one of the most exciting things to ever happen to me. How awesome was it that my work was highlighted as one of the best in the world? (CSSVault was quite a different beast 8 years ago too).&lt;/p&gt;

&lt;p&gt;A few days later I received an email from the Art Director of a local agency asking to come in and meet their team. And so it was that I was interviewing for a job to work on sites for the likes of Apple, Disney, HP, and RIM. Pretty fucking crazy. It felt good — it felt like validation that my work &lt;em&gt;was&lt;/em&gt; worth paying for.&lt;/p&gt;

&lt;p&gt;I remember the last question asked of me at the interview, because it was possibly the most terrifying professional moment of my life. To paraphrase:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You have no formal eduction, no experience with any big clients, what makes you think you could possibly be good enough to work here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Through a stroke of luck, a moment of wit came upon me and I replied with the only thing my brain could grasp on:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I have no idea. I didn’t even know I was interviewing, Kris sent me an email asking &lt;em&gt;me&lt;/em&gt; to come in today because he thought my work was good. Is it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I never really got an answer. But I did get the job. Because my work &lt;em&gt;was&lt;/em&gt; good. But I was given a much lower salary than my co-workers. For every hour I worked, the agency billed my time out at a 2,083% markup. To the client (who couldn’t see my height), my time was worth over 20x the amount I was worth to the agency.&lt;/p&gt;

&lt;p&gt;Looking back, I can’t help but think this was discrimination. For age, for height, for whatever you will. I had no lower education than my peers, equal or better skills, and did work of the highest quality.&lt;/p&gt;

&lt;p&gt;The physical world is harsh. I’m by all means a member of the privileged class in America by race, gender, and sexual orientation — yet a few inches of vertical height is all it took to diminish the value of my work.&lt;/p&gt;

&lt;p&gt;At least they paid me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;About the same time, I started to get into Ruby on Rails. I wasn’t really the most brilliant programmer or designer, but I could get stuff done. I was invited to hang out in the &lt;code&gt;#caboose&lt;/code&gt; IRC channel. There aren’t any avatars in IRC. No faces. No names. Just usernames and words.&lt;/p&gt;

&lt;p&gt;I ended up making a lot of friends through caboose. Friends I still have today. Friends I’ve worked with, friends I haven’t worked with. Friends who never saw my face or knew my age for almost half a decade. It just wasn’t important.&lt;/p&gt;

&lt;p&gt;We were working on code, on Photoshop documents — pixels. The pixels didn’t care what we looked like. Over time we grew to respect each other. Not because of how handsome we were, but because of the things we built.&lt;/p&gt;

&lt;p&gt;In a strange sense, it was a bit of a utopian work environment. How could the internet know you were gay? 80 years old? Hispanic? Transgender? Karl Rove? It just didn’t matter. Respect was earned through actions and the words you actually said (hard to squeeze rumor out of publicly logged chat).&lt;/p&gt;

&lt;p&gt;It took me until early 2009 for me to realize the real value of this network. I was miserable at my job and  I sent a long-winded email to &lt;a href=&quot;https://twitter.com/court3nay&quot;&gt;court3nay&lt;/a&gt; inquiring about working with &lt;a href=&quot;http://entp.com&quot;&gt;ENTP&lt;/a&gt;. ENTP was a half-product, half-consulting agency at this point comprised almost solely of caboosers. All of whom had never met me or ever heard my voice. About 30 seconds later I got a response:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hey Kyle,&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty fuckin awesome, if you&amp;rsquo;ll pardon my french.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re just heading out to breakfast, I mean, an important company meeting, but I&amp;rsquo;ll get back to you today.&lt;/p&gt;

&lt;p&gt;Courtenay &amp;amp; Rick&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And then a follow up:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;OK, I&amp;rsquo;ve talked it over with everyone (unanimous&amp;ndash; &amp;ldquo;kyle? awesome!&amp;rdquo;)&lt;br/&gt;
I think you&amp;rsquo;ll fit into our team perfectly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No in person interview. No phone calls. No technical test. They were confident enough in my pixels to give me what equated to my dream job at that point in my life.&lt;/p&gt;

&lt;p&gt;Really fucking crazy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This industry we work in is magical. For the first time in human history, it’s possible to be represented (almost) solely through the merits of your work. Build something magical, push it up to &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; under a pseudonym, and you could become one of the most sought after programmers in the world.&lt;/p&gt;

&lt;p&gt;That’s really fucking awesome.&lt;/p&gt;

&lt;p&gt;There’s plenty of prejudice and intolerance in our world — and in our industry. But never forget that &lt;strong&gt;pixels don’t care&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Patent reasoning</title>
   
     <link href="http://warpspire.com/blog/patent-reasoning" />
   
   <updated>2013-01-04T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/patent-reasoning</id>
   <content type="html">&lt;p&gt;Software patents are incredibly difficult to enforce.&lt;/p&gt;

&lt;p&gt;As software becomes more complex, patents become more difficult to decipher. Only expert software engineers can truly understand the intended meaning of modern software patents.&lt;/p&gt;

&lt;p&gt;As the total number of software patents increase over time, legislation and litigation of software patents become more complex. Only expert lawyers can successfully litigate patents.&lt;/p&gt;

&lt;p&gt;Very few expert lawyers are also expert software engineers.&lt;/p&gt;

&lt;h2&gt;Big Software vs small software&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s generally understood that the benefit of software patents is to ensure mutually assured destruction amongst competitors. If a competitor sues you over a patent, you countersue with your own patents.&lt;/p&gt;

&lt;p&gt;The majority of software companies are small compared to Big Software — companies like IBM, Google, and Apple. Small software competes directly with Big Software.&lt;/p&gt;

&lt;p&gt;In a race for patents, it is impossible for a small software company to catch up to the breadth of patents of a Big Software company. Big Software have large patent portfolios and can continue to create patents at the same (or faster) rate than small software.&lt;/p&gt;

&lt;p&gt;It is not feasible for a small software company to generate a more effective patent portfolio than a Big Software company.&lt;/p&gt;

&lt;h2&gt;Patent trolls&lt;/h2&gt;

&lt;p&gt;Patent portfolios are known to be ineffective against patent trolls. Patent trolls are small companies or individuals who own very few unused patents (often one) and sue companies hoping for a large payout.&lt;/p&gt;

&lt;p&gt;Mutually assured destruction does not apply since the individual has nothing to lose.&lt;/p&gt;

&lt;h2&gt;Lawyers&lt;/h2&gt;

&lt;p&gt;Lawyers make a lot of money off patents.&lt;/p&gt;

&lt;p&gt;They make money advising companies on patents. They make money creating them. They make money legislating them. They make money litigating them. Lawyers win on both sides during patent disputes.&lt;/p&gt;

&lt;p&gt;It costs software companies time and money to create and manage patents. Time and money not spent on products.&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t a single downside to patents from a lawyer&amp;rsquo;s perspective. They create a dependency system that benefits lawyers.&lt;/p&gt;

&lt;h2&gt;An obvious conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve yet to see a single argument that software patents benefit small software companies in any way.&lt;/p&gt;

&lt;p&gt;The US Patent Office is &lt;a href=&quot;http://www.groklaw.net/article.php?story=20130104012214868&quot;&gt;holding a series of round table discussions about software patents&lt;/a&gt;. I encourage you to participate.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jigsaws are better</title>
   
     <link href="http://www.perfect-flow.com/blog/boxes2/" />
   
   <updated>2012-12-09T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-jigsaws-are-better</id>
   <content type="html">&lt;p&gt;On the subject of repair scheduling:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Repairs scheduling is fundamentally flawed. Maintenance companies try to shoehorn irregular shaped jobs into nice, standardised boxes and it leads to appointments being missed and repairs left unfinished. The company wants its’ customers to be compliant and flexible, but customers need the opposite to be true. So how do we fix the system?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Great article on systems design. The system is more efficient and it makes customers happier. The end result is even simpler than it started:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We ask the customer when they want us to turn up and we give operatives all the time and materials they need to complete the right fix.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; Love it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dumb software</title>
   
     <link href="http://warpspire.com/blog/dumb-software" />
   
   <updated>2012-12-03T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/dumb-software</id>
   <content type="html">&lt;p&gt;There is a beauty to dumb software. These things like HTML, CSS and JavaScript. Things like Unix, C and SQL. Plain text files, email, and GIFs. They&amp;rsquo;re fun to work with. They always work. There&amp;rsquo;s no caveats. I just love them so damn much.&lt;/p&gt;

&lt;p&gt;But wait until you see the light! Software today is intelligent! Asynchronous front ends generated from esoteric scripting languages running on clusters of distributed virtual machines around the globe! Death to repetition! It&amp;rsquo;s more productive! It&amp;rsquo;s scalable! It&amp;rsquo;s fault tolerant!&lt;/p&gt;

&lt;p&gt;I followed the light and it only ended in darkness.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Intelligent systems have dark corners. Why didn&amp;rsquo;t it work this time? It&amp;rsquo;s hard to see everything. I&amp;rsquo;m not sure what it&amp;rsquo;s doing.  This is impossible! Is there even a bug, or have I simply lost my mind?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot;&gt;&lt;p&gt;The problem with ARC is it&#39;s hard to verify the difference between you losing your mind and an ARC bug.&lt;/p&gt;&amp;mdash; Josh Abernathy (@joshaber) &lt;a href=&quot;https://twitter.com/joshaber/status/274717093486800896&quot; data-datetime=&quot;2012-12-01T03:30:33+00:00&quot;&gt;December 1, 2012&lt;/a&gt;&lt;/blockquote&gt;


&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;p&gt;Dumb systems are obvious. It&amp;rsquo;s obviously doing something dumb — too much work, too inflexible. But the work is predictable. It&amp;rsquo;s obviously doing too much work. I can see everything.&lt;/p&gt;

&lt;p&gt;Dumb software can do great things. It put humankind on the Moon. &lt;a href=&quot;http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf&quot;&gt;It got us to Mars&lt;/a&gt;. To me, it feels like the dumber the software, the more it accomplishes.&lt;/p&gt;

&lt;p&gt;I want to create great things. And sometimes it just feels right to build a simple little static website with HTML, CSS, and JavaScript.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pace</title>
   
     <link href="http://warpspire.com/blog/pace" />
   
   <updated>2012-08-02T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/pace</id>
   <content type="html">&lt;p&gt;American service constantly presses on its diners. Can I show you to your seat? Here’s some menus. How’s the meal? Would you like the check?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Would you like the check?&lt;/em&gt; American servers always ask you if you’d like the check. Sometimes they’ll even bring you the check before you’re done eating.&lt;/p&gt;

&lt;p&gt;It’s all about turning tables. More tables, more tips (it’s not all greedy — servers are paid less and rely on tips as part of their salary in America). And diners have places to go and people to see, right?&lt;/p&gt;

&lt;p&gt;The pace of meals in America is a reflection of this service style. People come in for dinner, eat, and leave.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Many European cities have a different view on service — a very opt-in style. It would be rude for your server to ask if you’d like the check. It’s up to you when you want to leave.&lt;/p&gt;

&lt;p&gt;In Barcelona, once you’re done with the meal your server comes by to take your plates away and asks if you’d like  some coffee. Encouraging you to stick around and enjoy the surroundings.&lt;/p&gt;

&lt;p&gt;The pace follows. Meals last longer. More conversation, more time at the table. There’s no pressure to move on to the next item on your task list.&lt;/p&gt;

&lt;p&gt;A lot of people I talk to label this change of pace as “european cafe culture”. But I think it’s really just a culture of people comfortable staying at restaurants without eating/drinking something as fast as possible.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A few weeks ago I was in Barcelona taking a break from life. At one point, my friend was sketching out a tattoo and I was reading while we enjoyed an after lunch coffee. We were both doing things I often hear people say they &lt;em&gt;wish they had more time&lt;/em&gt; to do.&lt;/p&gt;

&lt;p&gt;I hate that phrase. We all have the same amount of time. We choose how to spend it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pace.&lt;/strong&gt; I want to spend more time conscious of the pace of my life.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Peepcode Play by Play</title>
   
     <link href="https://peepcode.com/products/play-by-play-kneath" />
   
   <updated>2012-05-16T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-peepcode</id>
   <content type="html">&lt;p&gt;I sat down for a while with the excellent PeepCode folks and recorded a Play by Play — a real time video of me solving a design problem. A bit terrifying, a bit fun. Check it out if you&amp;rsquo;d like to see me bumble around.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Choose Your Adventure! slides</title>
   
     <link href="http://warpspire.com/talks/chooseyouradventure/" />
   
   <updated>2012-04-28T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-ull-talk</id>
   <content type="html">&lt;p&gt;Slides from my presentation I gave at Úll - &lt;em&gt;Choose Your Adventure!&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Knyle Style Sheets</title>
   
     <link href="http://warpspire.com/blog/kss" />
   
   <updated>2011-12-05T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/kss</id>
   <content type="html">&lt;p&gt;So I&amp;rsquo;ve been writing CSS for somewhere around 13 years now. Some might think I&amp;rsquo;ve learned the right way to write CSS in that time — but if you ask me all I&amp;rsquo;ve learned is the most efficient way to drive someone insane.&lt;/p&gt;

&lt;p&gt;CSS is complicated. It&amp;rsquo;s not object oriented. It&amp;rsquo;s not hierarchical. It&amp;rsquo;s a specificity based cascade applied to a dynamic hierarchical data structure that few people truly comprehend. Trying to impart this knowledge on someone is a very difficult task with extremely minimal rewards. I used to think that imparting this knowledge was the path toward writing maintainable CSS within a team.&lt;/p&gt;

&lt;h2&gt;Maintainability comes from shared understanding&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s hard to define maintainability. In my eyes it has to do with creating a &lt;em&gt;shared understanding&lt;/em&gt;. Anyone who has owned an aircooled Volkswagen knows how to adjust valves on any other aircooled Volkswagen. This is because of one of the best technical books ever written: &lt;a href=&quot;http://www.amazon.com/Keep-Volkswagen-Alive-Step-Step/dp/1566913101&quot;&gt;How to Keep Your Volkswagen Alive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Everyone I know who owned a Bug, Bus, Ghia or Thing owns a copy of this book and &lt;em&gt;understands&lt;/em&gt; how to work on their car. This book is in large part responsible for that shared understanding.&lt;/p&gt;

&lt;p&gt;How can we create a shared understanding with CSS?&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;p&gt;For all of the talk of &lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot;&gt;Object Oriented CSS&lt;/a&gt;, &lt;a href=&quot;http://smacss.com/&quot;&gt;SMACSS&lt;/a&gt; and pre-processors like &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS/SCSS&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;&amp;hellip; no one is talking about documentation.&lt;/p&gt;

&lt;p&gt;Documentation is the key to shared understanding.&lt;/p&gt;

&lt;h2&gt;Enter KSS&lt;/h2&gt;

&lt;p&gt;Inspired by &lt;a href=&quot;http://tomdoc.org&quot;&gt;TomDoc&lt;/a&gt;, &lt;a href=&quot;https://github.com/kneath/kss&quot;&gt;KSS&lt;/a&gt; attempts to provide a methodology for writing maintainable, documented CSS within a team. Specifically, KSS is a documentation specification and styleguide format. It is not a preprocessor, CSS framework, naming convention, or specificity guideline. This means it works great with ideas like OOCSS, SMACSS, SASS, and LESS.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a &lt;a href=&quot;https://github.com/kneath/kss/blob/master/SPEC.md&quot;&gt;specification&lt;/a&gt; for KSS as well as a &lt;a href=&quot;https://rubygems.org/gems/kss&quot;&gt;ruby gem&lt;/a&gt; to parse the documentation.&lt;/p&gt;

&lt;p&gt;In a nutshell, KSS looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;A button suitable for giving stars to someone.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;:hover             - Subtle hover highlight.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;.stars-given       - A highlight indicating you&amp;#39;ve already given a star.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;.stars-given:hover - Subtle hover highlight on top of stars-given styling.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;.disabled          - Dims the button to indicate it cannot be used.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;Styleguide 2.1.3.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.button.star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.button.star.stars-given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.button.star.disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The idea is to write simple, yet machine parseable documentation such that you can automatically create a living styleguide like this one:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;a href=&quot;http://assets.warpspire.com/images/kss/styleguide-full.png&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/kss/styleguide-thumb.png&quot; alt=&quot;Styleguide screencapture&quot; /&gt;
 &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;KSS aims to create a shared understanding&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve tried really hard to make sure that KSS is flexible enough to work with as many styles of CSS development as possible. It&amp;rsquo;s purpose is to create a shared understanding through code documentation and styleguides. Not to tell you how to write CSS.&lt;/p&gt;

&lt;p&gt;And well. I think that&amp;rsquo;s an important idea. Hope you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kneath/kss&quot;&gt;https://github.com/kneath/kss&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Knyle style recruiting</title>
   
     <link href="http://warpspire.com/blog/knyle-style-recruiting" />
   
   <updated>2011-11-07T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/knyle-style-recruiting</id>
   <content type="html">&lt;p&gt;Otherwise known as Kyle Neath&amp;rsquo;s guide to hiring the best people in the world: an examination into why recruiters are useless piles of humanflesh hellbent on destroying the souls of good designers and developers across the world.&lt;/p&gt;

&lt;p&gt;Too harsh? Most likely. But here&amp;rsquo;s the thing: recruiters do not give a fuck about doing good in the world. They do not care about making people happy. They do not care about building a good company. They do not care about treating email addresses as human beings. They only care about their percentage.&lt;/p&gt;

&lt;h2&gt;Employees are the best recruiters&lt;/h2&gt;

&lt;p&gt;At its core, the idea of a recruiter never made sense. Are they going to be working with their hire? Are they a designer, developer, copywriter or someone who knows what kind of skills and personality traits to look for?&lt;/p&gt;

&lt;p&gt;No. They&amp;rsquo;re salespeople. And I bet they&amp;rsquo;re great at hiring other salespeople.&lt;/p&gt;

&lt;p&gt;It just seems so obvious to me that employees make the best recruiters. Recruiters have nothing to gain from a good employee, but employees have everything to gain. If you consider yourself a manager, don&amp;rsquo;t you want to be responsible for building the team of people you&amp;rsquo;re going to manage? If you&amp;rsquo;re a developer, don&amp;rsquo;t you want to work with other great developers?&lt;/p&gt;

&lt;h2&gt;How I hire people&lt;/h2&gt;

&lt;p&gt;I happen to think I&amp;rsquo;ve become pretty good at recruiting over the years. We&amp;rsquo;ve built a pretty &lt;a href=&quot;https://github.com/about&quot;&gt;amazing team&lt;/a&gt; at GitHub, and I&amp;rsquo;d like to explain how I go about finding the next GitHubber.&lt;/p&gt;

&lt;h3&gt;Friendship&lt;/h3&gt;

&lt;p&gt;If you want to hire great designers and developers, you should be friends with them. Be interested in who they are and what they do. This is not rocket science. When you&amp;rsquo;re friends with someone you&amp;rsquo;ll notice when they&amp;rsquo;re frustrated with their job or know when they&amp;rsquo;re looking for something new. And even if they&amp;rsquo;re not looking for something new — maybe they have a (designer/developer) friend who is.&lt;/p&gt;

&lt;h3&gt;Research&lt;/h3&gt;

&lt;p&gt;Take time to look up potential hires online. If you&amp;rsquo;re hiring in the tech industry, they&amp;rsquo;re almost certain to have an internet presence. Look up their current job. See what they do. Take a look on &lt;a href=&quot;http://dribbble.com&quot;&gt;dribbble&lt;/a&gt;, browse their code on &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; — look at their work. More often than not, it&amp;rsquo;s completely unnecessary to interview for skills. You can find that out with a half hour online. Who knows, you might even find &lt;a href=&quot;http://ozmm.org/posts/who_we_hire.html&quot;&gt;someone new to hire&lt;/a&gt; in the process.&lt;/p&gt;

&lt;p&gt;Research is the proper tool to &lt;strong&gt;understand whether someone has the skills to work for you&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Grab a beer&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s vitally important that you sit down face to face and &lt;a href=&quot;http://pjhyett.com/2010/05/27/the-beer-test.html&quot;&gt;grab a beer&lt;/a&gt; with every potential hire. Or sit down for dinner. Smoke a joint. I don&amp;rsquo;t care what it is — you need to sit down in a relaxed environment and figure out what kind of person they are.&lt;/p&gt;

&lt;p&gt;Talk about their family, friends, hobbies, current job, dream job — anything you can think of. Some good things to figure out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is this person a good human?&lt;/li&gt;
&lt;li&gt;Do they have a drive to build good things?&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;they&lt;/em&gt; want to work on the things &lt;em&gt;you&lt;/em&gt; want them to?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Grabbing a beer will help you figure out if &lt;strong&gt;someone will fit in.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Job boards, Twitter, and advertising&lt;/h3&gt;

&lt;p&gt;I always try and use my personal connections to find potential hires first, but sometimes I come up empty handed. When that fails, you need to stretch out and get some new blood. There&amp;rsquo;s no shortage of Job boards out there: &lt;a href=&quot;https://jobs.github.com&quot;&gt;GitHub Jobs&lt;/a&gt;, &lt;a href=&quot;http://dribbble.com/jobs&quot;&gt;Dribbble&lt;/a&gt;, &lt;a href=&quot;http://jobs.37signals.com/&quot;&gt;37Signals&lt;/a&gt;, &lt;a href=&quot;http://www.authenticjobs.com/&quot;&gt;Authentic Jobs&lt;/a&gt; — the list goes on. Pick a few and post some ads. Maybe sponsor a &lt;a href=&quot;https://www.facebook.com/groups/sfdesignlunch/&quot;&gt;local meetup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But remember you&amp;rsquo;re posting an &lt;strong&gt;advertisement.&lt;/strong&gt; This isn&amp;rsquo;t a fact sheet. Make that shit sexy. Make potential hires read it and think &lt;em&gt;I want that job.&lt;/em&gt; Explain specifically what they&amp;rsquo;ll be doing day to day, what they&amp;rsquo;ll be responsible for, and who they&amp;rsquo;ll be working with. Explain what your company is. Explain what it is your company wants to do.&lt;/p&gt;

&lt;p&gt;And if you have anything listed under requirements, you better damn well mean it. Don&amp;rsquo;t ask for a college degree if you don&amp;rsquo;t actually &lt;em&gt;require&lt;/em&gt; it. That&amp;rsquo;s just dumb.&lt;/p&gt;

&lt;h2&gt;Credit where credit is due&lt;/h2&gt;

&lt;p&gt;These ideas aren&amp;rsquo;t exactly unique, and in fact they&amp;rsquo;re really not even mine.&lt;/p&gt;

&lt;p&gt;In 2004 I was working for an agency and we hired a full time recruiter. Props to that man for showing me just how incompetent recruiters can be. Never in my life did I think someone would create a MySpace account and contact every teenager in the city trolling for leads. He really redefined the phrase &lt;em&gt;unqualified candidate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In 2009 I started working with &lt;a href=&quot;https://twitter.com/defunkt&quot;&gt;Chris&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mojombo&quot;&gt;Tom&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/pjhyett&quot;&gt;PJ&lt;/a&gt;. For every person that thinks GitHub&amp;rsquo;s success is due to luck — I want to remind you how important the &lt;em&gt;people&lt;/em&gt; are in a successful company. And these guys spend a lot of time making sure we have the right people.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tom.preston-werner.com/2008/11/03/how-to-meet-your-next-cofounder.html&quot;&gt;How to meet your next cofounder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/6443&quot;&gt;Getting a job with open source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Spend time on recruiting: it&amp;rsquo;s important.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mustache, ERB and the future of templating</title>
   
     <link href="http://warpspire.com/blog/mustache-style-erb" />
   
   <updated>2011-10-17T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/mustache-style-erb</id>
   <content type="html">&lt;p&gt;There are days that I feel like I&amp;rsquo;ve spent the better part of my life inside templating languages. I&amp;rsquo;ve rocked hundreds of different styles of templates over the past 8 years. Smarty,  vBulletin templates, generations of Wordpress, J2EE, XSLT, CFML, ERB, HAML, Mustache and every form of in-house bastardized template language that exists.&lt;/p&gt;

&lt;p&gt;So when I say that &lt;a href=&quot;http://mustache.github.com&quot;&gt;{{ mustache }}&lt;/a&gt; is my favorite templating language I&amp;rsquo;ve ever worked with, I mean it with a great deal of sincerity and experience. It&amp;rsquo;s syntactically elegant, focused on output (HTML), encourages documentation, and discourages unmaintainable magic. I want to use it everywhere.&lt;/p&gt;

&lt;h2&gt;I mustache you, why mustache?&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/mustache-erb/mustache.png&quot; alt=-&quot;Mustache - Logic-less template&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Mustache is more than a syntax. It&amp;rsquo;s a different approach to traditional templating — mustache templates have no logic. The template files themselves are HTML and mustaches:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;div class=&#39;line&#39; id=&#39;LC1&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;devlist&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC2&#39;&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;developers&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC3&#39;&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC4&#39;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC5&#39;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;show_url&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;(&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;github_username&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC6&#39;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;languages&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC7&#39;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC8&#39;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC9&#39;&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC10&#39;&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;developers&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#39;line&#39; id=&#39;LC11&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You cannot modify variables. You cannot apply filters. You can only output variables or a collection of variables. Everything else happens inside of a &lt;em&gt;view&lt;/em&gt;. A view can be written in any language of your choosing: C, Objective-C, Ruby, Python, Javascript, etc. I&amp;rsquo;ll use Ruby since that&amp;rsquo;s what we use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jobs&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Views&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Developers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Layout&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;developers&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fullname&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fullname&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:github_username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:show_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/developers/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:languages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;developers_count&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_hits&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s just a good old Ruby class. Oh the wonder you can do with a class! Include modules, extend classes (such as that Layout class), and define any method you so desire. With any documentation your heart desires (something that&amp;rsquo;s missing from every templating strategy I&amp;rsquo;ve ever used).&lt;/p&gt;

&lt;p&gt;I thought I loved Mustache a year ago, but over time I&amp;rsquo;ve learned just how revolutionary separating templates from views is toward maintainability and collaboration. Anyone who knows HTML can edit Mustache templates. And all the magic that happens on the whole &lt;strong&gt;V&lt;/strong&gt; side of MVC can be fully documented and separated into re-usable Ruby classes and modules.&lt;/p&gt;

&lt;h2&gt;You want me to switch templating languages on my legacy app?&lt;/h2&gt;

&lt;p&gt;For all this talk, the application I spend most of my time working on is still ERB. In fact, the rails app that powers &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; has over &lt;strong&gt;500 erb templates&lt;/strong&gt;. We have dozens of people throwing hundreds of commits a day at the codebase in over &lt;strong&gt;150 branches&lt;/strong&gt;. Switching to Mustache would be a disaster requiring everyone to stop development, switch patterns, and introduce an unknown number of bugs to our customers. A shitty trade.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to stop new feature development, but I do want better templates. And I know that Mustache is the direction I&amp;rsquo;d like to go. Luckily for me, I work with the smartest people in the world. A little while ago &lt;a href=&quot;https://github.com/sr&quot;&gt;Simon&lt;/a&gt; introduced a new templating strategy that I really like.&lt;/p&gt;

&lt;h2&gt;Mustache-style ERB templates&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve started using the mustache style but completely within ERB — we haven&amp;rsquo;t modified the template rendering chain at all. Inside of a new helper, we&amp;rsquo;ll create a view class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;NavigationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RepositoryNavigationView&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NumberHelper&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_repository&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@current_repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# What symbols should we trigger highlighting for various tabs?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Returns an array of symbols.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highlights_for_code&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:repo_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_downloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_commits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_branches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highlights_for_pulls&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:repo_pulls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highlights_for_issues&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:repo_issues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Should we show the wiki tab? We try and show it when it&amp;#39;s useful to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# someone using these rules:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - Never show it if the wiki is disabled under the admin section.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - Show it if you have admin access to the repository&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - Show it if there is content&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Returns true to show the tab.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_wiki?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_wiki?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_in?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pushable_by?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nicely documented, isolated from application-wide helpers and easy to find. Inside of the &lt;code&gt;html.erb&lt;/code&gt;, create a new instance of this view object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NavigationHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RepositoryNavigationView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@omit_repository_toolbar&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;ul class=&amp;quot;tabs&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Code&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_code&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Network&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_network&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pull Requests&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull_requests_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_pulls&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_issues?&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;      &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Issues&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issues_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_issues&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_wiki?&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;      &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Wiki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wikis_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_wiki&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Stats &amp;amp;amp; Graphs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphs_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:highlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_graphs&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_subnav&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;repositories/code&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_code&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_subnav&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;repositories/network&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_network&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_subnav&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;repositories/graphs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_graphs&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_subnav&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;repositories/wiki&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlights_for_wiki&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;rsquo;re used to regular ERB templates it&amp;rsquo;s immediately obvious where this data comes from — it&amp;rsquo;s right at the top of the file! Ack the project for &lt;code&gt;RepositoryNavigationView&lt;/code&gt; and you&amp;rsquo;ve found your view class. No magic.&lt;/p&gt;

&lt;p&gt;One huge advantage of this tactic is that you can still use all the same Rails/ERB shortcuts for quick prototyping. If someone doesn&amp;rsquo;t want to learn the new template strategy right away, they can use the same methods they&amp;rsquo;ve been using for years.&lt;/p&gt;

&lt;h2&gt;Graceful upgrade path&lt;/h2&gt;

&lt;p&gt;Switching templating languages is something that needs to be done gracefully when you&amp;rsquo;re working with others. Ripping out everyone&amp;rsquo;s foundation is a recipe for unhappy developers. Rails is all about patterns, and sticking to those patterns is really important.&lt;/p&gt;

&lt;p&gt;This strategy allows us to slowly convert the codebase to a better documented, view/template separation that anyone who&amp;rsquo;s worked with ERB can understand. And if we choose to switch to true-and-blue Mustache some day, our code will be 80% there already.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Brew Methods</title>
   
     <link href="http://brewmethods.com/" />
   
   <updated>2011-09-20T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-brewmethods</id>
   <content type="html">&lt;p&gt;A wonderfully simple site dedicated to the art and style of creating fine coffee. Learn how to use that Chemex properly!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Design Hacks for the Pragmatic Minded Video</title>
   
     <link href="http://confreaks.net/videos/522-roa2011-design-hacks-for-the-pragmatic-minded" />
   
   <updated>2011-09-05T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-rbonales-talk</id>
   <content type="html">&lt;p&gt;The Ruby on Ales folks got around to publishing the video of my &lt;a href=&quot;http://warpspire.com/talks/designhacks&quot;&gt;Design Hacks&lt;/a&gt; talk.  The audio is a little weird in the begining, but hang on — it clears up a few minutes in.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Relentless Quality</title>
   
     <link href="http://warpspire.com/blog/relentless-quality" />
   
   <updated>2011-08-25T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/relentless-quality</id>
   <content type="html">&lt;p&gt;If there&amp;rsquo;s one thing I&amp;rsquo;ll remember about Alex Mahernia, it&amp;rsquo;s footer spacing. Here we are at 10pm in the office and we&amp;rsquo;d be trying to launch a site. The only thing left is an A-OK from the creative director. And without fail, he&amp;rsquo;d yell at me to come into his office and point at his screen. &amp;ldquo;The footer spacing is too big on this page.&amp;rdquo; So I&amp;rsquo;d go back to battle the CSS until every single page on the site had consistent footer spacing in every browser.&lt;/p&gt;

&lt;p&gt;Motherfucking footer spacing.&lt;/p&gt;

&lt;p&gt;And what did it matter? Are our clients really going to lose customers because there&amp;rsquo;s an extra 10 pixels of footer spacing in IE6 on one of the pages? Is the client going to refuse payment because of these pixels? HOW MUCH BLOOD ARE THESE PIXELS WORTH?&lt;/p&gt;

&lt;p&gt;But it was never about the footer spacing. It was about quality. It was about cultivating a culture of &lt;strong&gt;relentless quality&lt;/strong&gt; in everything we produced.&lt;/p&gt;

&lt;h2&gt;Quality versus the Ego&lt;/h2&gt;

&lt;p&gt;Every time Alex called me into his office and showed me a page with an extra 7 pixels of spacing my blood pressure went through the roof. I took it as a personal insult. But he wasn&amp;rsquo;t insulting me. It was about producing a quality product.&lt;/p&gt;

&lt;p&gt;Quality has no room for egos. Other people will have better solutions. You are going to miss things. You are going to break things. You are going to make mistakes. And people are going to point it out.&lt;/p&gt;

&lt;p&gt;And I think it&amp;rsquo;s okay to get upset. Take that feeling and turn it inwards. Vow to &lt;strong&gt;make things better&lt;/strong&gt;. Make sure you&amp;rsquo;re always producing the best quality product you can.&lt;/p&gt;

&lt;h2&gt;Move fast and break things&lt;/h2&gt;

&lt;p&gt;If you take a look at any of Facebook&amp;rsquo;s recruiting marketing, you&amp;rsquo;ll see a phrase repeated over and over:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Move fast and break things&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And with good reason — the idea it embodies is fantastic. Unfortunately I see a lot of people interpreting this quote as something like this:&lt;/p&gt;

&lt;p&gt; &lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/relentless-quality/breakthings.png&quot; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;It reminds me of another misinterpretation that&amp;rsquo;s always bugged me:&lt;/p&gt;

&lt;p&gt; &lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/relentless-quality/shipfast.png&quot; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Quality isn&amp;rsquo;t something to be sacrificed.  Move fast and break things, &lt;strong&gt;then move fast and fix it.&lt;/strong&gt;  Ship early, ship often, &lt;strong&gt;sacrificing features, never quality.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Embrace change. Ship. Never cut corners.&lt;/p&gt;

&lt;h2&gt;Quality is contagious&lt;/h2&gt;

&lt;p&gt;Which reminds me of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Broken_windows_theory&quot;&gt;broken windows theory&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Monitoring and maintaining urban environments in a well-ordered condition may prevent further vandalism as well as an escalation into more serious crime.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Broken windows are the reason most large software projects suck to work on. A little technical debt here, a few shortcuts there, and pretty soon you&amp;rsquo;ve got a codebase so full of broken windows that no one even cares if they throw another pile of broken glass on the heap.&lt;/p&gt;

&lt;p&gt;But just as broken windows are contagious, so is a dedication to quality. Carve out a little piece of a messy codebase and clean it up. Sharpen the edges, polish the surface and make it &lt;em&gt;shine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The caveat here is that you can&amp;rsquo;t half-ass quality. Dedication to &amp;ldquo;semi-quality&amp;rdquo; isn&amp;rsquo;t dedication at all. High-end design coupled with mediocre engineering can only produce a mediocre result.&lt;/p&gt;

&lt;p&gt;And I don&amp;rsquo;t know about you, but I don&amp;rsquo;t dream of building mediocre. I dream of building the best. So I&amp;rsquo;m thankful to Alex for instilling this idea of relentless quality in me, even if I still have footer spacing related nightmares from time to time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deploying: Then &amp; Now</title>
   
     <link href="http://warpspire.com/blog/ops-art" />
   
   <updated>2011-08-02T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/ops-art</id>
   <content type="html">&lt;p&gt;A couple months ago I got up on stage during lightening talks  at &lt;a href=&quot;http://codeconf.com&quot;&gt;CodeConf 2011&lt;/a&gt; to talk about our friendly robot, &lt;a href=&quot;http://hubot.github.com&quot;&gt;Hubot&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/opsart/hubot-thinner.png&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Inside of five minutes I logged into our Campfire room with spotty WiFi, asked Hubot a favor, and he deployed a major new feature to our site — &lt;a href=&quot;https://github.com/blog/831-issues-2-0-the-next-generation&quot;&gt;Issues 2.0&lt;/a&gt;. A deploy spanning around 30 servers that changed a major feature for 800,000 users. It was pretty awesome and kind of a ridiculous thing to do.&lt;/p&gt;

&lt;p&gt;Rewind the clock 7 years ago and I had just landed my first steady job in the tech industry — a front end developer for a big interactive agency.&lt;/p&gt;

&lt;p&gt;I remember one of our clients had a static HTML website that I was in charge of maintaining. We had a 45 minute window occurring once a week where we could deploy their site.&lt;/p&gt;

&lt;p&gt;Once a week, I generated a list of files I&amp;rsquo;d changed since the last week so a System Administrator could FTP the files over to production. Any changes to production I needed that occurred outside that 45 minute window required manager intervention.&lt;/p&gt;

&lt;p&gt;Recap time.&lt;/p&gt;

&lt;h3&gt;2004&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;System Administrator time required to deploy every website.&lt;/li&gt;
&lt;li&gt;Deploys scheduled by managers once a week.&lt;/li&gt;
&lt;li&gt;Manually generating lists of changed files.&lt;/li&gt;
&lt;li&gt;Simple deploys take 30+ minutes.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;2011&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Deploying on stage for the hell of it.&lt;/li&gt;
&lt;li&gt;System Administrator probably drinking whiskey.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2011 is pretty fucking awesome.&lt;/p&gt;

&lt;p&gt;Deployment is an art. And the style in which you deploy impacts your company culture more than you think. &lt;strong&gt;Deploy with style.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Designing GitHub for Mac</title>
   
     <link href="http://warpspire.com/blog/designing-github-mac" />
   
   <updated>2011-06-28T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/designing-github-mac</id>
   <content type="html">&lt;p&gt;A few days ago we lifted the curtains on a project I&amp;rsquo;ve been deep into for a long time now: &lt;a href=&quot;http://mac.github.com&quot;&gt;GitHub for Mac&lt;/a&gt;. This is the first OS X app I&amp;rsquo;ve designed and thought it might be interesting to share some of the process and things I learned throughout development.&lt;/p&gt;

&lt;h2&gt;Why should we build  it?&lt;/h2&gt;

&lt;p&gt;For a long time I assumed OS X developers would see the immense market for an awesome Git application. Unfortunately for everyone involved, every OS X application that&amp;rsquo;s showed up over the years gave up and tried to turn CLI commands into buttons.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/tower.png&quot; alt=&quot;Screenshot of Git Tower&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Clients claiming to be &amp;ldquo;simple&amp;rdquo; choose to redefine &amp;ldquo;simple&amp;rdquo; as fewer supported Git commands rather than simplifying the interaction with Git.&lt;/p&gt;

&lt;p&gt;It blows my mind that no one tried to do anything special. Git (and its  DVCS cousins like Mercurial &amp;amp; Bazaar) provide an amazing platform to build next generation clients — and it&amp;rsquo;s like the entire OS X ecosystem left their imagination at home.&lt;/p&gt;

&lt;p&gt;Eventually, I (well, many of us) decided that better native clients (OSX, Windows, Linux, Eclipse, Visual Studio, etc) was the best way to grow GitHub. And since we all use Macs — we should start off with an OS X application. Build what you know/use, expand from there.&lt;/p&gt;

&lt;h2&gt;What are we building?&lt;/h2&gt;

&lt;p&gt;Personally, I had some big goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Death of the SSH key. People should be able to connect to GitHub with their GitHub username and password.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make it obvious that there &lt;em&gt;is&lt;/em&gt; a distinction between remote and local. Make it clear what commits need to be pushed before others can see them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simplify the &lt;code&gt;git fetch, pull (--rebase), push&lt;/code&gt; interaction. Synchronize — don&amp;rsquo;t make the user figure out what they need to do to get their local commits remote and remote commits local.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix the local/remote branching problem. Get rid of this tracking idea — interact with local or remote branches as if they were no distinction between the two.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I didn&amp;rsquo;t want to replace the command line. &lt;strong&gt;I wanted to build an awesome version control client.&lt;/strong&gt; As it happens, Git is the perfect backend to do that — and GitHub is the perfect central server to collaborate.&lt;/p&gt;

&lt;h2&gt;Sketches &amp;amp; early ideas&lt;/h2&gt;

&lt;p&gt;The first thing we did was to start populating an internal wiki full of ideas. Lots of words, lots of sketches.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/sketchbook-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/sketchbook.png&quot; alt=&quot;My beloved sketchbook&quot; /&gt;&lt;/a&gt;
  &lt;small&gt;Incomprehensible pages from my Moleskine&lt;/small&gt;
&lt;/div&gt;




&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/scottmock-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/scottmock.png&quot; alt=&quot;Scott&#39;s mockups&quot; /&gt;&lt;/a&gt;
  &lt;small&gt;Scott created a bunch of mockups with Balsamiq&lt;/small&gt;
&lt;/div&gt;


&lt;h2&gt;Let&amp;rsquo;s get some designers on this&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d been using OS X for years, but I didn&amp;rsquo;t feel comfortable designing a native app. My previous attempts at OS X design weren&amp;rsquo;t too fantastic…&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/storia-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/storia.png&quot; alt=&quot;An abandoned design direction.&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In the end, we hired &lt;a href=&quot;http://eddit.com/&quot;&gt;Eddie Wilson&lt;/a&gt; to come up with some wireframes and some comps while &lt;a href=&quot;https://twitter.com/#!/joericioppo&quot;&gt;Joe&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/#!/joshaber&quot;&gt;Josh&lt;/a&gt; cranked away at the Cocoa backend. His first comps were a great start, and influenced the end product tremendously.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/eddit1-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/eddit1.png&quot; alt=&quot;Eddie&#39;s mockup&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;




&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/eddit2-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/eddit2.png&quot; alt=&quot;Eddie&#39;s mockup&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Unfortunately right about this time is when we learned how much we suck at working with contractors. We&amp;rsquo;re extremely opinionated, really bad at expressing our opinions, and change our minds all the time. We asked Eddie to hold off while we re-grouped and figured out what we wanted from the app.&lt;/p&gt;

&lt;p&gt;We sat down and had a lot of discussions about how we wanted this thing to work. &lt;a href=&quot;http://www.brandonwalkin.com/blog/&quot;&gt;Brandon Walkin&lt;/a&gt; helped out quite a bit, and even sketched up some wireframes &amp;amp; notes for us.&lt;/p&gt;

&lt;p&gt;Eventually we figured out what we wanted to design — but now we didn&amp;rsquo;t have anyone to design it. Eddie had since taken up other work and pretty much every Cocoa designer on the planet was inundated with work.&lt;/p&gt;

&lt;p&gt;In the end, I decided that GitHub for Mac was &lt;em&gt;the thing&lt;/em&gt; I wanted out of GitHub, and if I wanted it to happen I&amp;rsquo;d have to take the design reins. I picked up Eddie&amp;rsquo;s comps and ran with it.&lt;/p&gt;

&lt;h2&gt;A slow process&lt;/h2&gt;

&lt;p&gt;I tried my best to combine Eddie&amp;rsquo;s original comps with our internal feedback and match it up with a modern OS X look &amp;amp; feel. All in all I created 45 comps for 1.0 — each with about 5-10 unique states (with layer groups).&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/comps-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/comps.png&quot; alt=&quot;All my mockups&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;After the first round of comps, I started writing down how I imagined everything to work.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://share.kyleneath.com/secrets/08bce2/&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/styleguide.png&quot; alt=&quot;The styleguide&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;My plan was to fully flesh out this styleguide — but as it happened, &lt;a href=&quot;https://twitter.com/#!/joshaber&quot;&gt;Josh&lt;/a&gt; was able to implement my designs faster than I could explain them. Still, I think it was a good exercise to explain my thinking for the designs — if anything for my own personal benefit.&lt;/p&gt;

&lt;h2&gt;The aesthetic&lt;/h2&gt;

&lt;p&gt;Learning the OS X aesthetic wasn&amp;rsquo;t easy. And it probably didn&amp;rsquo;t help that I started to get serious about OS X design about the same time Lion screenshots started showing up. Like it or not, OS X app design is changing in drastic ways right now.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/lion.png&quot; alt=&quot;Lion screenshot&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Scrollbars are a thing of the past. Titlebars full of clickable areas. Buttons shedding themselves of borders. Custom graphics / buttons for every app. And Helvetica everywhere!&lt;/p&gt;

&lt;p&gt;I tried my best to weigh this new direction with a lot of my favorite designed apps — &lt;a href=&quot;http://itunes.apple.com/us/app/twitter/id409789998?mt=12&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://macrabbit.com/espresso/&quot;&gt;Espresso&lt;/a&gt;, &lt;a href=&quot;http://sparrowmailapp.com/&quot;&gt;Sparrow&lt;/a&gt;, and &lt;a href=&quot;http://www.panic.com/transmit/&quot;&gt;Transmit&lt;/a&gt; to name a few.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/githubmac/onepointoh-full.png&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/githubmac/onepointoh.png&quot; alt=&quot;1.0&quot; /&gt;&lt;/a&gt;
&lt;small&gt;Tweetie style side-tabs. No title in the window, instead a breadcrumb — always promoting a one-window experience.&lt;/small&gt;
&lt;/div&gt;




&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/popover.png&quot; alt=&quot;Popover&quot; /&gt;
&lt;small&gt;We use a lot of popovers (borrowed from iOS / XCode) rather than modal windows throughout the app.&lt;/small&gt;
&lt;/div&gt;




&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/sync.png&quot; alt=&quot;Sync button&quot; /&gt;
&lt;small&gt;Subtle buttons in the title bar.&lt;/small&gt;
&lt;/div&gt;


&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;Designing a native OS X app was definitely full of surprises. I&amp;rsquo;ve actually done quite a bit of native development before with WPF &amp;amp; Flex — but Cocoa is quite different.&lt;/p&gt;

&lt;h3&gt;Welcome to 2004 — everything is a sliced image&lt;/h3&gt;

&lt;p&gt;Remember web development in 2004? When you had to create pixel-perfect comps because every element on screen was an image? That&amp;rsquo;s what developing for Cocoa is. Drawing in code is &lt;em&gt;slow&lt;/em&gt; and &lt;em&gt;painful&lt;/em&gt;. Images are easier to work with and result in more performant code.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/slices.png&quot; alt=&quot;All of the slices&quot; /&gt;
&lt;small&gt;Remember these days?&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;This meant my Photoshop files had to be a &lt;em&gt;lot&lt;/em&gt; more fleshed out than I&amp;rsquo;ve been accustomed to in recent years. I usually get about 80% complete in Photoshop (using tons of screenshotting &amp;amp; layer flattening), then jump into code and tweak to completion. But with Cocoa, I ended up fleshing out that last 20% in Photoshop.&lt;/p&gt;

&lt;h3&gt;Change is painful&lt;/h3&gt;

&lt;p&gt;Want to move an element from the bottom of the screen to the top? A lot of times with Cocoa this involves rewriting your entire view. There is &lt;em&gt;no layout engine&lt;/em&gt; for Cocoa. If you want two elements to rest side to side, you&amp;rsquo;ll need to calculate the pixel size of the text, padding, borders, margins — then manually position the next element.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/githubmac/interfacebuilder.png&quot; alt=&quot;A typical xib file&quot; /&gt;
&lt;small&gt;What about Interface Builder? Pretty useless. Everything is a blue box on complex projects.&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Want to change the background color of a button? You&amp;rsquo;re probably going to have to rewrite all of the drawing code for the button. There is no styling engine in Cocoa.&lt;/p&gt;

&lt;p&gt;This sucks. And it means that change is insanely painful in code. It&amp;rsquo;s much easier to prototype with HTML / CSS and see if the design is going to hold up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://share.kyleneath.com/secrets/08bce2/changes.html&quot;&gt;This proposed changes redesign&lt;/a&gt; is a good example of what I mean. I spent a long time creating a &amp;ldquo;clickable&amp;rdquo; prototype with animations. In the end, we decided a lot of the core ideas were wrong and decided not to go down that path. Creating this HTML/CSS/JS prototype took a couple days. Doing the same in code would have taken a lot longer — and been &lt;em&gt;much&lt;/em&gt; harder to throw away (due to the way project files work in Xcode, branching is not simple).&lt;/p&gt;

&lt;h3&gt;Objective-C is easy, Cocoa is hard&lt;/h3&gt;

&lt;p&gt;This was the first serious Cocoa project I&amp;rsquo;ve been involved with. I had dozens of little example projects, but never pushed through to ship anything.  As I went on and talked to people about my frustrations, they inevitably came up with the same response:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why don&amp;rsquo;t you just use MacRuby?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why? Because &lt;strong&gt;Objective-C is really easy.&lt;/strong&gt; The language was never a problem. You know what was? Cocoa. Learning the differences between layer-backed views, layer-hosted views — understanding that you have to subclass &lt;em&gt;everything&lt;/em&gt; — balancing delegates, weak connections, strong connections, KVC, view controllers, and notifications — understanding little intricacies like how AppKit flips &lt;code&gt;.xib&lt;/code&gt;s when it load them up or how hard it is to make one word in a sentence bold. I&amp;rsquo;m not going to lie: Cocoa (that is: AppKit, UIKit, Core Text, Core Animation, etc) is extremely difficult. The gap between simple example apps and a fully functional application is huge.&lt;/p&gt;

&lt;p&gt;Projects like &lt;a href=&quot;https://github.com/BigZaphod/Chameleon&quot;&gt;Chameleon&lt;/a&gt; that give you a purely layer-backed environment to work with using a modern API (UIKit) matter &lt;em&gt;far&lt;/em&gt; more than the language you&amp;rsquo;re using. This isn&amp;rsquo;t to say MacRuby isn&amp;rsquo;t awesome —  it just means that it doesn&amp;rsquo;t make AppKit development any easier; you still have to learn Cocoa.&lt;/p&gt;

&lt;p&gt;Along those same lines, I think that &lt;strong&gt;Cocoa is dying for a framework.&lt;/strong&gt; Something that weighs on the simple defaults side rather than complex code generation side.&lt;/p&gt;

&lt;h3&gt;Secrecy is overrated&lt;/h3&gt;

&lt;p&gt;GitHub for Mac was in development for just under a year and there was never any leaked screenshots or blog posts. In fact, there were dozens of &lt;a href=&quot;http://dribbble.com/shots/54738-Desktop-UI&quot;&gt;public&lt;/a&gt; &lt;a href=&quot;http://dribbble.com/shots/170535-Add-Repo-Local&quot;&gt;screenshots&lt;/a&gt; of the &lt;a href=&quot;http://dribbble.com/shots/141734-Stars?list=103-Operation-08bce2&quot;&gt;app&lt;/a&gt; on dribbble — but for the most part, people were surprised when we launched.&lt;/p&gt;

&lt;p&gt;We didn&amp;rsquo;t have beta testers sign NDAs or demand first-borns to get access to the early builds. How on earth did we keep something under wraps for so long?&lt;/p&gt;

&lt;p&gt;We asked people politely not to share it with the world. It&amp;rsquo;s really not that hard. Don&amp;rsquo;t send betas to douchebags. Politely ask people not to blog about it. Done.&lt;/p&gt;

&lt;h2&gt;Here&amp;rsquo;s to a bright future&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m hoping that GitHub for Mac (and supporting projects, like &lt;a href=&quot;https://github.com/libgit2&quot;&gt;libgit2&lt;/a&gt;) spurs a new round of creativity in source control clients. I&amp;rsquo;ve already seen some progress — like &lt;a href=&quot;https://github.com/kennethreitz/legit&quot;&gt;legit&lt;/a&gt; — but I&amp;rsquo;m hoping to see a new generation of source control clients in the future. Git is immensely powerful, and it&amp;rsquo;s up to us to leverage that power into something awesome.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Excellent embedding markup</title>
   
     <link href="https://twitter.com/about/resources/followbutton" />
   
   <updated>2011-06-15T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/twitter-embed-code</id>
   <content type="html">&lt;p&gt;I was playing around with Twitter&amp;rsquo;s new Follow Button and I couldn&amp;rsquo;t help but notice that the embedding markup is some of the best I&amp;rsquo;ve ever seen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;http://twitter.com/kneath&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&amp;gt;Follow @kneath&amp;lt;/a&amp;gt;
&amp;lt;script src=&quot;http://platform.twitter.com/widgets.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love the idea of using regular HTML with feature-flags in &lt;code&gt;data&lt;/code&gt; attributes combined with a common script. Can&amp;rsquo;t wait to play around with this style on &lt;a href=&quot;https://gist.github.com&quot;&gt;Gist&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Build your business around an idea</title>
   
     <link href="http://warpspire.com/blog/idea-businesses" />
   
   <updated>2011-06-14T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/idea-businesses</id>
   <content type="html">&lt;p&gt;Living in San Francisco and working in tech right now is absolutely insane. Employers and recruiters battle for employees while VCs rain down millions of dollars &lt;a href=&quot;http://techcrunch.com/2011/01/28/yuri-milner-sv-angel-offer-every-new-y-combinator-startup-150k/&quot;&gt;without meeting founders or even knowing what kind of company they&amp;rsquo;re building&lt;/a&gt;. It&amp;rsquo;s a crazy world to live in and can feel like money &lt;em&gt;is&lt;/em&gt; growing on trees and the only spending limit is your imagination. If you have just a little bit of initiative, you can take any idea and start a company with absolutely zero personal risk.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s one of the biggest reasons San Francisco is so special to me. Everyone out here &lt;em&gt;knows&lt;/em&gt; they can do anything. Spend a few weeks hanging out in bars and cafes asking what people do and you&amp;rsquo;ll hear some of the most idiotic business ideas in the world. A lot of journalists use this argument to call San Francisco an echo chamber whose sole purpose is burning money. And you know, they&amp;rsquo;re right.&lt;/p&gt;

&lt;p&gt;This city does burn through money on terrible ideas. But that&amp;rsquo;s a tradeoff for fostering a city of people who believe they can do anything. And that spawns an incredible number of amazing companies — so it doesn&amp;rsquo;t bother me. What does bother me is the &lt;em&gt;lack of imagination&lt;/em&gt; most startup founders have.&lt;/p&gt;

&lt;h2&gt;Build something incredible&lt;/h2&gt;

&lt;p&gt;Most founders I talk to are pretty complacent building something mediocre. They won&amp;rsquo;t admit if you flat out ask them — but try pressing them to describe what makes their company special. Most cop out and give you an answer like:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We&amp;rsquo;re building [technology x] because [company y] hasn&amp;rsquo;t built it and [people z] need it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Want a more concrete example? How about something like:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We&amp;rsquo;re building a cloud sync solution for iOS because Apple hasn&amp;rsquo;t built it and almost every iOS application needs sync.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are thousands of people building products like this. They&amp;rsquo;re filling holes. Filling holes is mediocre and boring. Dare to build something incredible – something unique, something lasting, something special.&lt;/p&gt;

&lt;h2&gt;Ideas are lasting, products are not&lt;/h2&gt;

&lt;p&gt;The easiest way to build something incredible is to base your business around an idea. Products are just the manifestation of the idea.&lt;/p&gt;

&lt;p&gt;This is something I think about at GitHub a lot. We&amp;rsquo;ve built an amazing product (&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt;) — but when you ask us what the &lt;a href=&quot;https://github.com/about&quot;&gt;company is about&lt;/a&gt; we say:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We make it easier to collaborate with others and share your projects with the universe.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s a lot of interesting things you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; see it that description: Git, version control, issue tracking, wikis, or website. We know that our product (a website hosting git repositories with built-in issue tracking &amp;amp; wikis) is great — but if it doesn&amp;rsquo;t serve a higher purpose, it would be mediocre. So we focus on the idea.&lt;/p&gt;

&lt;p&gt;That means looking at version control, wikis, and issue tracking as tools for collaboration. It means that as important as it is for our website to be easy to use — it&amp;rsquo;s equally important for Git to be easy to use. Or to create tools that let people use Git without even knowing they&amp;rsquo;re using Git.&lt;/p&gt;

&lt;p&gt;If I look into the future, I know that the idea of collaboration is lasting — but Git? That&amp;rsquo;s a hard bet to make. I know that if we focus our business on collaboration we can build something lasting. If we focus our business on being a Git host we&amp;rsquo;re doomed.&lt;/p&gt;

&lt;h2&gt;Ideas are sexy&lt;/h2&gt;

&lt;p&gt;One of the more awesome things about building your business around an idea is how easy it is to pitch to others. Ideas are sexy and draw people in — they invite passion and commitment. And pitching people is all about displaying passion and commitment. It doesn&amp;rsquo;t matter if you&amp;rsquo;re pitching for VC funding, trying to land a new customer, or interviewing a prospective employee — having a good pitch is critical to any successful business.&lt;/p&gt;

&lt;p&gt;People want to be part of ideas. Being part of a company who builds a successful product is cool… but being part of an idea is a lot more attractive. If you can build a business where both your employees and your customers think they&amp;rsquo;re part of an idea, you&amp;rsquo;ve created something special.&lt;/p&gt;

&lt;h2&gt;Evolving ideas from products&lt;/h2&gt;

&lt;p&gt;The trouble is that founding a company around an idea doesn&amp;rsquo;t actually work. Apple &lt;del&gt;Computer&lt;/del&gt; is a great example. They take bleeding edge technology, marry it with exceptional design, and sell it at a premium price. But the company wasn&amp;rsquo;t always like that. It was founded around a product — the personal computer. Yet in 2011, Apple&amp;rsquo;s biggest business is mobile phones.&lt;/p&gt;

&lt;p&gt;You have to ask… how did a company founded around building personal computers come to generate most of its revenue from mobile phones? They &lt;em&gt;evolved&lt;/em&gt;. They found their strengths (design, technology), and evolved the company around those values. This manifested itself into new products — the iPod, iPhone, iPad, TV, MobileMe, Airport Expresses, Cinema Displays, etc. Some successes. Some failures.&lt;/p&gt;

&lt;p&gt;The core component of all these products is that they are manifestations of an idea. When the iPod took off in popularity, Apple didn&amp;rsquo;t rearrange the company around portable music devices. They kept focusing on building exceptionally designed hi-tech gadgets with bleeding edge technology.&lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;s okay to focus on a product at first. But as soon as you find your strengths as a company, abstract it out into an idea and focus on that. Do that and you won&amp;rsquo;t have your entire business invalidated by a feature that Facebook or Apple rolled out at their last keynote. Because ideas will last, products won&amp;rsquo;t.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Infinite Scroll + HTML5 History API</title>
   
     <link href="/experiments/history-api/" />
   
   <updated>2011-05-31T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-history-api</id>
   <content type="html">&lt;p&gt;Something I&amp;rsquo;ve been meaning to do for a while — here&amp;rsquo;s a little experiment using the HTML5 History API and infinite scrolling to kill off &amp;ldquo;next page&amp;rdquo; links and still maintain real URLs that persist across page views.&lt;/p&gt;

&lt;p&gt;In my perfect world, this is how Twitter, Facebook and Tumblr&amp;rsquo;s infinite scrolling would work.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Product design at GitHub</title>
   
     <link href="http://warpspire.com/blog/product-design" />
   
   <updated>2011-03-30T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/product-design</id>
   <content type="html">&lt;p&gt;Product design is easily the hardest aspect of building software today. Technology, hiring, funding, aesthetic design, and press are all minuscule in comparison. When I talk about product design I&amp;rsquo;m referring to the process by which you decide what your product does and does not do. I happen to think we do a pretty good job of this at GitHub, and I&amp;rsquo;d like to give you a bit of an insight into our process and hopefully shed some light on why it works so well.&lt;/p&gt;

&lt;p&gt;I should warn you that I am not a &amp;ldquo;Product Designer.&amp;rdquo; We don&amp;rsquo;t have titles at GitHub — we let employees pick their own.  I like to call myself &lt;strong&gt;~designer&lt;/strong&gt; since I mostly focus on the look &amp;amp; feel of our product. But then again, I spent the past weekend building an application to track &amp;amp; distribute binaries and updating some of our reducing functions to support a newer version of MongoDB. So, yeah. I&amp;rsquo;m ~designer. But maybe that leads me to my next point…&lt;/p&gt;

&lt;h2&gt;Everyone is a product designer&lt;/h2&gt;

&lt;p&gt;Every employee at GitHub is a product designer. We only hire smart people we  trust to make our product better. We don&amp;rsquo;t have managers dictating what to work on. We don&amp;rsquo;t require executive signoff to ship features. Executives, system administrators, developers, and designers concieve, ship, and remove features alike.&lt;/p&gt;

&lt;p&gt;Having the role of &amp;ldquo;Product Designer&amp;rdquo; or having a CEO who says they&amp;rsquo;re going to &amp;ldquo;focus on product design now&amp;rdquo; never made much sense to me. Aren&amp;rsquo;t you hiring smart people who use your product? Don&amp;rsquo;t you trust your employees? Doesn&amp;rsquo;t everyone at your company want to make your product better? Doesn&amp;rsquo;t that make everyone product designers all of the time?&lt;/p&gt;

&lt;p&gt;Along these lines, my two favorite questions to ask in an interview (or to people who don&amp;rsquo;t know they&amp;rsquo;re interviewing) are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What would you like to see in GitHub?&lt;/li&gt;
&lt;li&gt;What feature do you think we messed up / should remove?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;It brings out the passion in people and instantly highlights problems you might have with their decisions. Some people just don&amp;rsquo;t have the same vision for your product as you do, and that&amp;rsquo;s fine.&lt;/p&gt;

&lt;h2&gt;Write down ideas like crazy&lt;/h2&gt;

&lt;p&gt;Our internal wiki is filled with ideas. Old ideas. Bad ideas. Good ideas. Half-baked ideas. The point is that we have a place to share our crazy with each other. &lt;a href=&quot;https://gist.github.com/ad66d382a04c063b6861&quot;&gt;This wiki page&lt;/a&gt; discussing compare view eventually became &lt;a href=&quot;https://github.com/blog/712-pull-requests-2-0&quot;&gt;Pull Requests 2.0&lt;/a&gt; — arguably the best code review tool I&amp;rsquo;ve ever used.&lt;/p&gt;

&lt;p&gt;Most of the time when someone adds an idea it&amp;rsquo;s nothing original. It&amp;rsquo;s something we&amp;rsquo;ve discussed in person, seen in another product, or maybe thought about ourselves. But that&amp;rsquo;s really half the point — seeing someone else write down the same idea you&amp;rsquo;ve had makes you twice as excited about the idea. As others chime in saying they&amp;rsquo;d love to see the feature, excitement about it grows and grows. Eventually you&amp;rsquo;ve got 4 developers hacking on something at 11:30pm because they want to see it happen so badly.&lt;/p&gt;

&lt;h2&gt;Constantly experiment and iterate&lt;/h2&gt;

&lt;p&gt;Right now our main repository has 65 branches. This doesn&amp;rsquo;t count the dozen or so other repositories that collectively represent what is &lt;a href=&quot;https://github.com&quot;&gt;https://github.com&lt;/a&gt; or the 139 repositories under our organization. Needless to say, there are a ton of features, anti-features and half ideas in these branches. Sometimes they&amp;rsquo;re really pretty features that aren&amp;rsquo;t functional and sometimes they&amp;rsquo;re really ugly features that are completely functional.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re always sending pull requests, shipping them to staging and asking others what they think. Talking about a feature in a meeting and crafting a spec is one thing, but coding up a working prototype is way more effective. We&amp;rsquo;re always running experimental features in production to staff only. No better way to see if a feature is going to fit than to actually use it.&lt;/p&gt;

&lt;p&gt;Once a feature is out and ready for people to use there&amp;rsquo;s about a 100% chance that someone is going to want to change some aspect of it. So we iterate — tweak, deploy, discuss in a pull request — over and over until it&amp;rsquo;s good enough for public consumption.&lt;/p&gt;

&lt;p&gt;On that note, our pull requests are generally pretty &lt;em&gt;epic&lt;/em&gt;. It turns out that pull requests are perfect for experimenting with new features, discussing them with the team, and getting others to help you ship. &lt;a href=&quot;http://assets.warpspire.com/images/product-design/pull-request.png&quot;&gt;Check out this pull request&lt;/a&gt; for shipping our org profiles.  (Funny anectdote: this pull request was created before we shipped pull requests 2.0 — we &lt;em&gt;constantly&lt;/em&gt; use experimental features)&lt;/p&gt;

&lt;h2&gt;Abandon features&lt;/h2&gt;

&lt;p&gt;You can&amp;rsquo;t run a product and pretend that every one of your ideas is perfect. You&amp;rsquo;re going to have bad ideas, ideas that don&amp;rsquo;t fit, and features that become abandoned. Don&amp;rsquo;t be afraid to abandon ideas. The amount of time you spend on something is meaningless. You&amp;rsquo;re not losing anything by throwing work away — you&amp;rsquo;re choosing not to make your product worse.&lt;/p&gt;

&lt;p&gt;The first version of &lt;a href=&quot;http://jobs.github.com&quot;&gt;http://jobs.github.com&lt;/a&gt; that we built didn&amp;rsquo;t share a single piece of functionality with what shipped on day one. It wasn&amp;rsquo;t an iteration — we straight up threw away a few months of work because we realized it was a bad idea. We started using our creation and realized we couldn&amp;rsquo;t figure out how to make money without pissing off our customers. So we abandoned that idea and started anew — even though we could have shipped it and started making money immediately.&lt;/p&gt;

&lt;p&gt;Shipping features because you spent time or money on them is a coward&amp;rsquo;s excuse. It takes balls to abandon features — grow some.&lt;/p&gt;

&lt;h2&gt;Argue all the time&lt;/h2&gt;

&lt;p&gt;We do not have a quiet workplace. We argue in bars, in Campfire and in email. New hires and CEOs alike. But it&amp;rsquo;s not personal — it&amp;rsquo;s about making our product better. If you&amp;rsquo;re not forced to rationalize your product  choices, who&amp;rsquo;s to say you&amp;rsquo;re making good decisions?&lt;/p&gt;

&lt;p&gt;Arguing with your co-workers isn&amp;rsquo;t a bad thing. It&amp;rsquo;s not creating a negative work environment — it&amp;rsquo;s a tool to help you make good decisions. Being an empty cheerleader and telling everyone that their idea is great is harmful and short-sighted. Argue and make good decisions.&lt;/p&gt;

&lt;h2&gt;Talk to your customers&lt;/h2&gt;

&lt;p&gt;I spend a good portion of my day reading through our &lt;a href=&quot;http://support.github.com&quot;&gt;support site&lt;/a&gt;, mailing lists, twitter feeds, and blog posts written about git and GitHub. Listening to your customers is supremely important — they&amp;rsquo;re full of great ideas. They&amp;rsquo;re also full of shockingly terrible ideas. As &lt;a href=&quot;http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year.html&quot;&gt;Tom&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Don’t give your customers what they ask for; give them what they want.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We also spend a lot of &lt;em&gt;physical&lt;/em&gt; time with our customers. We have monthly meetups here in San Francisco, and you can pretty much guarantee that anyone who&amp;rsquo;s traveling will host a meetup in whatever city they&amp;rsquo;re in.  People can get crazy online. It&amp;rsquo;s a lot harder to spout out that crazy when you&amp;rsquo;re talking to someone face to face. It forces people to really think about what they&amp;rsquo;re going to say and reminds them that there&amp;rsquo;s a living, breathing human being behind the product.&lt;/p&gt;

&lt;h2&gt;Product design is in the eye of the beholder&lt;/h2&gt;

&lt;p&gt;We know that product design isn&amp;rsquo;t just adding and removing features. It&amp;rsquo;s how our customers perceive the features. Who cares if some analyst thinks your company is doing well if your customers don&amp;rsquo;t?&lt;/p&gt;

&lt;p&gt;Having a great blog post explaining new features is absolutely killer. It allows us to frame features in a certain light and explain our thinking. It also shows a record of shipping — and we try hard to ship and tell people about it all of the time.&lt;/p&gt;

&lt;p&gt;If you redesign your entire product once every two years like Twitter does, it&amp;rsquo;s a &lt;em&gt;big deal&lt;/em&gt;. If your users don&amp;rsquo;t like 100% of it, they&amp;rsquo;re going to be pissed. But if you ship something every two months and they don&amp;rsquo;t like 10% of it — their overall perception is still positive.&lt;/p&gt;

&lt;p&gt;We also know that what we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; do is just as important as what we &lt;em&gt;are&lt;/em&gt; doing. We don&amp;rsquo;t publish roadmaps or promise features within a timeframe — we &lt;a href=&quot;http://ozmm.org/posts/managing_expectations.html&quot;&gt;under promise and over deliver&lt;/a&gt;. And really, I think that&amp;rsquo;s why our customers are so happy with our product design as a whole.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t give your customers what they ask for, give them what they want. Under promise, over deliver.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Design hacks for the pragmatic minded</title>
   
     <link href="/talks/designhacks" />
   
   <updated>2011-03-24T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-designhacks-presentation</id>
   <content type="html">&lt;p&gt;Slides and references links from my presentation I gave at Ruby on Ales - &lt;em&gt;Design hacks for the pragmatic minded&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Documentation is freaking awesome</title>
   
     <link href="/talks/documentation" />
   
   <updated>2011-02-05T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-documentation-presentation</id>
   <content type="html">&lt;p&gt;Slides and references links from my presentation I gave at Magic Ruby - &lt;em&gt;Documentation is freaking awesome&lt;/em&gt;. Check it out if you&amp;rsquo;re curious.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Speaking at Magic Ruby</title>
   
     <link href="http://magic-ruby.com/" />
   
   <updated>2011-01-04T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-magic-ruby</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;ll be giving a talk about documentation (no, not just code comments and RDoc) at Magic Ruby February 4th-5th. Oh, did I mention it&amp;rsquo;s in &lt;strong&gt;Disneyworld?&lt;/strong&gt; And it&amp;rsquo;s &lt;strong&gt;free?&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>URL Design</title>
   
     <link href="http://warpspire.com/blog/url-design" />
   
   <updated>2010-12-28T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/url-design</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;You should take time to design your URL structure.&lt;/strong&gt; If there&amp;rsquo;s one thing I hope you remember after reading this article it&amp;rsquo;s to take time to design your URL structure. Don&amp;rsquo;t leave it up to your framework. Don&amp;rsquo;t leave it up to chance. Think about it and craft an experience.&lt;/p&gt;

&lt;p&gt;URL Design is a complex subject. I can&amp;rsquo;t say there are any &amp;ldquo;right&amp;rdquo; solutions — it&amp;rsquo;s much like the rest of design. There&amp;rsquo;s good URL design, there&amp;rsquo;s bad URL design, and there&amp;rsquo;s everything in between — it&amp;rsquo;s subjective.&lt;/p&gt;

&lt;p&gt;But that doesn&amp;rsquo;t mean there aren&amp;rsquo;t best practices for creating great URLs. I hope to impress upon you some best practices in URL design I&amp;rsquo;ve learned over the years and explain why I think new HTML5 javascript history APIs are so exciting to work with.&lt;/p&gt;

&lt;h2&gt;Why you need to be designing your URLs&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/urldesign/chrome.jpg&quot; alt=&quot;Chrome&#39;s URL bar&quot; /&gt;&lt;/div&gt;


&lt;p&gt;The URL bar has become a main attraction of modern browsers. And it&amp;rsquo;s not just a simple URL bar anymore — you can type partial URLs and browsers use dark magic to seemingly conjure up exactly the full URL you were looking for. When I type in &lt;strong&gt;&lt;code&gt;resque issues&lt;/code&gt;&lt;/strong&gt; into my URL bar, the first result is &lt;code&gt;https://github.com/defunkt/resque/issues&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;URLs are &lt;em&gt;universal&lt;/em&gt;. They work in Firefox, Chrome, Safari, Internet Explorer, cURL, wget, your iPhone, Android and even written down on sticky notes. They are the one universal syntax of the web. Don&amp;rsquo;t take that for granted.&lt;/p&gt;

&lt;p&gt;Any regular semi-technical user of your site should be able to navigate 90% of your app based off memory of the URL structure. In order to achieve this, your URLs will need to be &lt;em&gt;pragmatic.&lt;/em&gt; Almost like they were a math equation — many simple rules combined in a strategic fashion to get to the page they want.&lt;/p&gt;

&lt;h2&gt;Top level sections are gold&lt;/h2&gt;

&lt;p&gt;The most valuable aspect of any URL is what lies at the top level section. In my opinion, it should be the first discussion of any startup directly after the idea is solidified. Long before any technology discussion. Long before any code is written. This is top-level section is going to change the fundamentals of how your site functions.&lt;/p&gt;

&lt;p&gt;Do I seem dramatic? It may seem that way — but come 1,000,000 users later think about how big of an impact it will be. Think about how big of a deal Facebook&amp;rsquo;s rollout of usernames was. Available URLs are a lot like real estate and the top level section is the best property out there.&lt;/p&gt;

&lt;p&gt;Another quick tip — whenever you&amp;rsquo;re building a new site, think about &lt;a href=&quot;http://www.quora.com/How-do-sites-prevent-vanity-URLs-from-colliding-with-future-features?__snids__=4909005&quot;&gt;blacklisting a set of vanity URLs&lt;/a&gt; (and maybe learn a little bit about bad URL design from Quora&amp;rsquo;s URLs).&lt;/p&gt;

&lt;h2&gt;Namespacing is a great tool to expand URLs&lt;/h2&gt;

&lt;p&gt;Namespaces can be a great way to build up a pragmatic URL structure that&amp;rsquo;s easy to remember with continued usage. What do I mean by a namespace? I mean a portion of a URL that dictates unique content. An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/&lt;strong&gt;defunkt/resque&lt;/strong&gt;/issues&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the URL above, &lt;strong&gt;&lt;code&gt;defunkt/resque&lt;/code&gt;&lt;/strong&gt; is the namespace. Why is this useful? Because anything after that URL suddenly becomes a new top level section. So you can go to any &lt;strong&gt;&lt;code&gt;&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;&lt;/code&gt;&lt;/strong&gt; and then tack on &lt;code&gt;/issues&lt;/code&gt; or maybe &lt;code&gt;/wiki&lt;/code&gt; and get the same page, but under a different namespace.&lt;/p&gt;

&lt;p&gt;Keep that namespace clean. Don&amp;rsquo;t start throwing some content under &lt;code&gt;/feature/&lt;strong&gt;&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;&lt;/strong&gt;&lt;/code&gt; and some under &lt;code&gt;/&lt;strong&gt;&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;&lt;/strong&gt;/feature&lt;/code&gt;. For a namespace to be effective it has to be universal.&lt;/p&gt;

&lt;h2&gt;Querystrings are great for filters and sorts&lt;/h2&gt;

&lt;p&gt;The web has had a confused past with regards to querystrings. I&amp;rsquo;ve seen everything from every page of a site being served from one URL with different querystring parameters to sites who don&amp;rsquo;t use a single querystring parameter.&lt;/p&gt;

&lt;p&gt;I like to think of querystrings as the knobs of URLs — something to tweak your current view and fine tune it to your liking. That&amp;rsquo;s why they work so great for sorting and filtering actions. Stick to a uniform pattern (&lt;code&gt;sort=alpha&amp;amp;dir=desc&lt;/code&gt; for instance) and you&amp;rsquo;ll make sorting and filtering via the URL bar easy and rememberable.&lt;/p&gt;

&lt;p&gt;One last thing regarding querystrings: The page should work without the querystrings attached. It may show a different page, but the URL without querystrings should render.&lt;/p&gt;

&lt;h2&gt;Non-ASCII URLs are terrible for english sites&lt;/h2&gt;

&lt;p&gt;The world is a complicated place filled with ¿ümlåts?, ¡êñyés! and all sorts of awesome characters ☄. These characters have no place in the URL of any english site. They&amp;rsquo;re complicated to type with english keyboards and often times expand into confusing characters in browsers (ever see &lt;code&gt;xn--n3h&lt;/code&gt; in a url? That&amp;rsquo;s a ☃).&lt;/p&gt;

&lt;h2&gt;URLs are for humans — not for search engines&lt;/h2&gt;

&lt;p&gt;I grew up in this industry learning how to game search engines (well, Google) to make money off my affiliate sales, so I&amp;rsquo;m no stranger to the practice of keyword stuffing URLs. It was fairly common to end up with a URL like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://guitars.example.com/best-guitars/cheap-guitars/popular-guitar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That kind of URL used to be great for SEO purposes. Fortunately Google&amp;rsquo;s hurricane updates of 2003 eliminated any ranking benefit of these URLs. Unfortunately the professional SEO industry is centered around extortion and still might advise you stuff your URLs with as many keywords as you can think of. They&amp;rsquo;re wrong — ignore them.&lt;/p&gt;

&lt;p&gt;Some additional points to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Underscores are just bad. Stick to dashes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use short, full, and commonly known words. If a section has a dash or special character in it, the word is probably too long.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;URLs are for humans. &lt;strong&gt;Design them for humans.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;A URL is an agreement&lt;/h2&gt;

&lt;p&gt;A URL is an agreement to serve something from a predictable location for as long as possible. Once your first visitor hits a URL you&amp;rsquo;ve implicitly entered into an agreement that if they bookmark the page or hit refresh, they&amp;rsquo;ll see the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t change your URLs after they&amp;rsquo;ve been publicly launched.&lt;/strong&gt; If you absolutely must change your URLs, add redirects — it&amp;rsquo;s not that scary.&lt;/p&gt;

&lt;h2&gt;Everything should have a URL&lt;/h2&gt;

&lt;p&gt;In an ideal world, every single screen on your site should result in a URL that can be copy &amp;amp; pasted to reproduce the same screen in another tab/browser. In fairness, this wasn&amp;rsquo;t completely possible until very recently with some of the new HTML5 browser history Javascript APIs. Notably, there are two new methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;onReplaceState&lt;/code&gt;&lt;/strong&gt; — This method replaces the current URL in the browser history, leaving the back button unaffected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;onPushState&lt;/code&gt;&lt;/strong&gt; - This method pushes a new URL onto the browser&amp;rsquo;s history, replacing the URL in the URL bar &lt;em&gt;and&lt;/em&gt; adding it to the browser&amp;rsquo;s history stack (affecting the back button).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;When to use &lt;code&gt;onReplaceState&lt;/code&gt; and when to use &lt;code&gt;onPushState&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;These new methods allow us to change the &lt;em&gt;entire&lt;/em&gt; path in the URL bar, not just the anchor element. With this new power, comes a new design responsibility — we need to craft the back button experience.&lt;/p&gt;

&lt;p&gt;To determine which to use, ask yourself this question: &lt;em&gt;Does this action produce new content or is it a different display of the same content?&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Produces new content&lt;/strong&gt; — you should use &lt;code&gt;onPushState&lt;/code&gt; (ex: pagination links)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Produces a different display of the same content&lt;/strong&gt; — you should use &lt;code&gt;onReplaceState&lt;/code&gt; (ex: sorting and filtering)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Use your own judgement, but these two rules should get you 80% there. Think about what you want to see when you click the back button and make it happen.&lt;/p&gt;

&lt;h2&gt;A link should behave like a link&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot of awesome functionality built into linking elements like &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.  If you middle click or command-click on them they&amp;rsquo;ll open in new windows. When you hover over an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; your browser tells you the URL in the status bar.  Don&amp;rsquo;t break this behavior when playing with &lt;code&gt;onReplaceState&lt;/code&gt; and &lt;code&gt;onPushState&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Embed the location of AJAX requests in the &lt;code&gt;href&lt;/code&gt; attributes of anchor elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;return true&lt;/code&gt; from Javascript click handlers when people middle or command click.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&amp;rsquo;s fairly simple to do this with a quick conditional inside your click handlers. Here&amp;rsquo;s an example jQuery compatible snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a.ajaxylink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Fallback for browser that don&amp;#39;t support the history API&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;replaceState&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Ensure middle, control and command clicks act normally&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;metaKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctrlKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Do something awesome, then change the URL&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replaceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;New Title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/some/cool/url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Post-specific URLs need to die&lt;/h2&gt;

&lt;p&gt;In the past, the development community loved to create URLs which could never be re-used. I like to call them POST-specific URLs — they&amp;rsquo;re the URLs you see in your address bar after you submit a form, but when you try to copy &amp;amp; pasting the url into a new tab you get an error.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no excuse for these URLs at all. Post-specific URLs are for redirects and APIs — not end-users.&lt;/p&gt;

&lt;h2&gt;A great example&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;https://github.com/resque/resque/pull/175#issuecomment-619615&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/urldesign/urlparts.1.gif&quot; alt=&quot;Example URL&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ASCII-only user generated URL parts (defunkt, resque).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;pull&amp;rdquo; is a short version of &amp;ldquo;pull request&amp;rdquo; — single word, easily associated to the origin word.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The pull request number is scoped to defunkt/resque (starts at &lt;strong&gt;one&lt;/strong&gt; there).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anchor points to a scrolling position, not hidden content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Bonus points:&lt;/strong&gt; This URL has many different formats as well — check out the &lt;a href=&quot;https://github.com/resque/resque/pull/175.patch&quot;&gt;patch&lt;/a&gt; and &lt;a href=&quot;https://github.com/resque/resque/pull/175.diff&quot;&gt;diff&lt;/a&gt; versions.&lt;/p&gt;

&lt;h2&gt;The beginning of an era&lt;/h2&gt;

&lt;p&gt;I hope that as usage of new Javascript APIs increases, designers and developers take time to design URLs.  It&amp;rsquo;s an important part of any site&amp;rsquo;s usability and too often I see URLs ignored. While it&amp;rsquo;s easy to redesign the look &amp;amp; feel of a site, it&amp;rsquo;s &lt;em&gt;much&lt;/em&gt; more difficult to redesign the URL structure.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m excited. I&amp;rsquo;ve watched URLs change over the years. At times hard-linking was sacrificed at the altar of AJAX while other times performance was sacrificed to generate real URLs for users. We&amp;rsquo;re finally at a point in time where we can have the performance and usability benefits of partial page rendering while designing a coherent and refined URL experience at the same time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My TextMate Snippets &amp; Triggers</title>
   
     <link href="http://github.com/kneath/textmate-snippets" />
   
   <updated>2010-08-26T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-snippets</id>
   <content type="html">&lt;p&gt;A while ago I put up a collection of some of my handcrafted TextMate snippets. mostly focused on front-end stuff: HTML shortcuts, CSS gradients, jQuery plugin bases, commenting helpers, etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Geek Talk Interview</title>
   
     <link href="http://thegeektalk.com/interviews/kyle-neath/" />
   
   <updated>2010-08-23T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-geektalk</id>
   <content type="html">&lt;p&gt;A quick interview I did over at The Geek Talk. Mostly covering my daily routine and whatnot.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RSS Feeds for Warpspire</title>
   
     <link href="http://feeds.feedburner.com/warpspire" />
   
   <updated>2010-08-23T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/link-feeds</id>
   <content type="html">&lt;p&gt;I was going to try and fix some bugs in &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; (that&amp;rsquo;s how this site is hosted) — but I think I&amp;rsquo;m going to give up that fight. If you&amp;rsquo;d like to subscribe to Warpspire, you can find the feeds at &lt;a href=&quot;http://feeds.feedburner.com/warpspire&quot;&gt;http://feeds.feedburner.com/warpspire&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rethinking Warpspire</title>
   
     <link href="http://warpspire.com/blog/rethinking" />
   
   <updated>2010-08-01T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/rethinking</id>
   <content type="html">&lt;p&gt;I think it&amp;rsquo;s always a good idea to take a step back and ask yourself why you&amp;rsquo;re doing something.  So right now I&amp;rsquo;m taking a step back to rethink Warpspire.&lt;/p&gt;

&lt;h2&gt;Getting rid of cruft&lt;/h2&gt;

&lt;p&gt;The other day I followed a link to a blog post on Mint. I was presented with this screen:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/rethinking/mint_screen.jpg&quot; alt=&quot;Screenshot of Mint blog post&quot; /&gt;&lt;/div&gt;


&lt;p&gt;I hate what most designers have done to the web. You&amp;rsquo;d think people would be taking cues from things like &lt;a href=&quot;http://lab.arc90.com/experiments/readability/&quot;&gt;Readability&lt;/a&gt; and Safari Reader, but they&amp;rsquo;re not. People are throwing more and more crap onto each page and making things harder and harder to read.&lt;/p&gt;

&lt;p&gt;Anyways, it got me to thinking about sites that I continue to enjoy reading in the browser. One site that immediately came to mind is &lt;a href=&quot;http://daringfireball.net&quot;&gt;Daring Fireball&lt;/a&gt;. The format and presentation has lasted for years without feeling tired or hard to read. So it should come as no suprise that this new layout mirrors DF in a great number of ways. (Alas, my logo features the same unicode character as DF — something which has now turned from a funny coincidence to a long boring story. I hate logos.)&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/rethinking/warpspire_screen.jpg&quot; alt=&quot;Screenshot of Warpspire&quot; /&gt;&lt;/div&gt;


&lt;p&gt;This new layout is the simplest layout I&amp;rsquo;ve ever had on one of my sites. The goal was to create a focused place for my ideas.&lt;/p&gt;

&lt;h2&gt;Abandoning old baggage&lt;/h2&gt;

&lt;p&gt;There was a lot of crap on Warpspire. WordPress tells me the first post was published August 15, 2004. &lt;strong&gt;That&amp;rsquo;s six years ago.&lt;/strong&gt;  To say that the web is a different place now is an understatement. I remember debugging that initial site on IE5 &lt;em&gt;for Mac&lt;/em&gt;.  Six years ago, I was in my 2nd year of studying Civil Engineering at Cal Poly. I had no concept of the value of the web or how important it would be come.  I was also twenty years old, angsty and wrong about many things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So I deleted most of my posts.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s left? The most popular posts (traffic wise) along with a couple of ones that I particularly enjoyed and still felt relevant.  I&amp;rsquo;ve also edited them all, and rewritten some.&lt;/p&gt;

&lt;p&gt;Almost certainly a bad idea for my traffic, but probably a good idea for my readership. And I&amp;rsquo;ll value readers over pageviews any day.&lt;/p&gt;

&lt;h2&gt;On the subject of comments&lt;/h2&gt;

&lt;p&gt;The thing about comments is that commentors tend to be a bunch of crazies wandering the internet like it&amp;rsquo;s a zombie apocolypse. It&amp;rsquo;s a striking contrast to the rational human beings whom I have sensible arguments with here in the meatspace.&lt;/p&gt;

&lt;p&gt;The thing is, I&amp;rsquo;ve met some of the smartest people on the planet through my site and I don&amp;rsquo;t want to lose that. So here&amp;rsquo;s the deal: you send me email, and I send you one back.  If I think others might be interested in what you have to say, I&amp;rsquo;ll post it here on Warpspire.&lt;/p&gt;

&lt;p&gt;A comment should mean something to you and it should mean something to me. Typical blog comments just stopped meaning anything to me a long time ago and that sucks. So I&amp;rsquo;m hoping this is a move toward fixing that.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What&#39;s your focus?</title>
   
     <link href="http://warpspire.com/blog/focus" />
   
   <updated>2010-03-29T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/focus</id>
   <content type="html">&lt;p&gt;Every great website has a focus.  If you can&amp;rsquo;t summarize the purpose of your website into one sentence, ten words or less &amp;ndash; your idea will almost certainly fail.  Talking to founders, I&amp;rsquo;d say this idea is pretty well established.  Now let me reveal a secret that is not so well established: your website&amp;rsquo;s design should follow this same focus.&lt;/p&gt;

&lt;h2&gt;Learn by example: source hosting sites&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start off with a field I&amp;rsquo;m pretty familiar with: source hosting sites. I&amp;rsquo;m talking about &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;http://bitbucket.org&quot;&gt;BitBucket&lt;/a&gt;, &lt;a href=&quot;http://sourceforge.net&quot;&gt;SourceForge&lt;/a&gt;, &lt;a href=&quot;http://code.google.com&quot;&gt;Google Code&lt;/a&gt;, &lt;a href=&quot;http://launchpad.net&quot;&gt;Launchpad&lt;/a&gt; and the likes.  These sites all have a common focus: &lt;strong&gt;sharing code.&lt;/strong&gt;  I&amp;rsquo;m going to show you why GitHub is the only site who&amp;rsquo;s design follows it&amp;rsquo;s focus.&lt;/p&gt;

&lt;p&gt;If your site&amp;rsquo;s focus is sharing code, the design should focus on sharing code. If you ever talk to any of us GitHubbers, we&amp;rsquo;ll always say that the site is &lt;em&gt;all about the code&lt;/em&gt;.  Let&amp;rsquo;s look at project landing pages in each of the above sites.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://github.com/facebook/three20&quot;&gt;GitHub&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/github.gif&quot; alt=&quot;GitHub&quot; /&gt;&lt;/div&gt;


&lt;p&gt;When you visit a GitHub project page, the first thing you see is the source code. Right below is the README pulled straight from the code.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://bitbucket.org/jespern/django-piston/overview/&quot;&gt;BitBucket&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/bitbucket.gif&quot; alt=&quot;BitBucket&quot; /&gt;&lt;/div&gt;


&lt;p&gt;BitBucket chose to highlight the shortlog (recent commits) on the project page.  If you want to see the code, you need to go to the 3rd tab.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://sourceforge.net/projects/junit/&quot;&gt;SourceForge&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/sourceforge.gif&quot; alt=&quot;SourceForge&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Sourceforge chose to highlight downloads (in this case, a compiled jar file &amp;mdash; not the code) on the project page.  If you want to see the code, you need to click Develop, and then fish around in the sidebar for the correct VCS and click browse.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://code.google.com/p/flot/&quot;&gt;Google Code&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/googlecode.gif&quot; alt=&quot;Google Code&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Google Code chose to highlight the wiki on the project page.  Getting to the code in Google Code is probably the most interesting of the bunch because many projects don&amp;rsquo;t even host their code there (example: &lt;a href=&quot;http://code.google.com/p/redis/wiki/UnstableSource?tm=4&quot;&gt;redis&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When you click the Source tab you actually get a wiki page which many projects use to point to another repository.  &lt;em&gt;If&lt;/em&gt; the project hosts it&amp;rsquo;s code there, there is a sub link under Source that is labeled Browse that you can finally see the code.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://launchpad.net/drizzle&quot;&gt;Launchpad&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/launchpad.gif&quot; alt=&quot;Launchpad&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Launchpad decided to highlight everything but the source code on the project page.  If you want to see the code, there is a tiny link in the middle of the page that says &amp;rsquo;View the branch content.&amp;rsquo;&lt;/p&gt;

&lt;h2&gt;Great examples from other fields&lt;/h2&gt;

&lt;p&gt;Source code hosting is just something that I&amp;rsquo;m extremely involved with. That doesn&amp;rsquo;t mean that focus is limited to code.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.flickr.com/photos/wcouch/4338090218/&quot;&gt;Flickr&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/flickr.gif&quot; alt=&quot;Flickr&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Flickr is all about sharing photos.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://facebook.com&quot;&gt;Facebook&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/facebook.gif&quot; alt=&quot;Facebook&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Facebook is all about connecting with your friends.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://daringfireball.net&quot;&gt;Daring Fireball&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/fireball.gif&quot; alt=&quot;Daring Fireball&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Daring Fireball is all about John Gruber&amp;rsquo;s writing.&lt;/p&gt;

&lt;h2&gt;Sites that have lost their focus&lt;/h2&gt;

&lt;p&gt;There is a huge genre of sites that seem to have completely forgotten their focus.  I&amp;rsquo;ll see if you can guess the genre.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://msnbc.com&quot;&gt;MSNBC&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/msnbc.gif&quot; alt=&quot;MSNBC&quot; /&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;http://nytimes.com&quot;&gt;NYTimes&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/nytimes.gif&quot; alt=&quot;NYTimes&quot; /&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href=&quot;http://www.rollingstone.com/politics/story/32255149/wall_streets_bailout_hustle/p&quot;&gt;Rolling Stone&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/rollingstone.gif&quot; alt=&quot;Rolling Stone&quot; /&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s no wonder news sites can&amp;rsquo;t get people to pay for their content. You need to focus on your content to get people to pay for it.&lt;/p&gt;

&lt;h2&gt;Charging for your focus&lt;/h2&gt;

&lt;p&gt;Many sites don&amp;rsquo;t want to give away their focus for free. That&amp;rsquo;s perfectly fine. But it doesn&amp;rsquo;t change a thing. Replace what people are going to pay for with an opportunity to pay you.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/focus/peepcode.gif&quot; alt=&quot;PeepCode&quot; /&gt;&lt;/div&gt;


&lt;p&gt;PeepCode&amp;rsquo;s focus is great tutorials. But the tutorial is not the focus of the product page &amp;mdash; instead a teaser and a purchase button are.&lt;/p&gt;

&lt;p&gt;Lots of people think that replacing their paid focus content with advertising is the solution &amp;mdash; but that just redirects the focus on advertising &amp;mdash; not getting paid.&lt;/p&gt;

&lt;p&gt;Premium content is not about &lt;em&gt;removing access&lt;/em&gt;, it&amp;rsquo;s about &lt;em&gt;charging for access&lt;/em&gt;.  Don&amp;rsquo;t focus on removing content, focus on charging for it.&lt;/p&gt;

&lt;h2&gt;Find your focus and focus on it&lt;/h2&gt;

&lt;p&gt;If you work on a website for a living, you should be thinking about your focus every single day.  It doesn&amp;rsquo;t matter if you&amp;rsquo;re a copywriter, project manager, designer or sysadmin.  What&amp;rsquo;s the focus of your site? Does your design reflect this? Run that through your head for every decision.&lt;/p&gt;

&lt;p&gt;The beautiful thing about focus is that it&amp;rsquo;s not about the details. It doesn&amp;rsquo;t  matter if you add some advertising to a sidebar, links to your header, change the background color or add administrative debris &amp;mdash; these are all minor subjects.  Focus is more about aiming in the right direction. Worry about the details later &amp;mdash; but never aim in a different direction.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Optimizing asset bundling and serving with Rails</title>
   
     <link href="http://github.com/blog/551-optimizing-asset-bundling-and-serving-with-rails" />
   
   <updated>2009-11-19T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/link-asset-bundling</id>
   <content type="html">&lt;p&gt;I wrote up a pretty lengthy post over at the GitHub blog explaining how we do asset bundling and serving. Well worth the read for anyone who&amp;rsquo;s interested in front end performance and works on ruby apps.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>It&#39;s not about how many hours you work</title>
   
     <link href="http://warpspire.com/blog/work-life-balance" />
   
   <updated>2009-10-11T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/work-life-balance</id>
   <content type="html">&lt;p&gt;My favorite discussion amongst web professionals is when people start talking about work/life balance and how many hours they&amp;rsquo;re working.  There&amp;rsquo;s been no end of interesting ideas to pop out from this &amp;ndash; everything from 4 hour work weeks to 100 hour work weeks.  And everyone thinks that they&amp;rsquo;ve got the answer. But I think everyone&amp;rsquo;s just arguing about an irrelevant metric: the hour.&lt;/p&gt;

&lt;h2&gt;Let&amp;rsquo;s talk about that work/life balance thing&lt;/h2&gt;

&lt;p&gt;Most of this discussion always seem to revolve around the idea of a work/life balance.  The basic idea is to keep yourself sane.  Don&amp;rsquo;t abandon your real life for your work.  That makes sense, until people start attaching hours to it.  I&amp;rsquo;ve had discussions with people where they try and argue to me that 40 hour work weeks keep them balanced.  But I have to wonder, where does that magical number 40 come from?&lt;/p&gt;

&lt;p&gt;The fallacy here is that people are thinking in black and white terms of &amp;ldquo;work&amp;rdquo; and &amp;ldquo;life.&amp;rdquo;  I never really understood that, and I think I&amp;rsquo;ve gotten to a point in my life where I can see why: it&amp;rsquo;s a bunch of bullshit that employers made up to promote 40 hour work weeks.  If you really think that there is a certain number of hours you can work a week to balance your life, you&amp;rsquo;re doing it wrong. So let&amp;rsquo;s ditch this idea of a work/life balance, because it just doesn&amp;rsquo;t make sense.&lt;/p&gt;

&lt;h2&gt;It&amp;rsquo;s about creating a creative environment in your life&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s just that simple.  If you&amp;rsquo;re in the creative field, you need to make sure your life promotes a creative environment.  There isn&amp;rsquo;t one catch-all formula to do this.  There isn&amp;rsquo;t a number of hours you need to work.  You just need to experiment and find out what works for you.  What I will do is try and offer some advice.&lt;/p&gt;

&lt;h3&gt;Find your passion in life and try to make money from it&lt;/h3&gt;

&lt;p&gt;If you hate your job, it&amp;rsquo;s unlikely that you&amp;rsquo;ll be successful in fostering a creative environment.  Try your best to fix this.  Find out what you&amp;rsquo;re good at, and try to make money from it.  You&amp;rsquo;ll be producing better (more valuable) work and enjoying life more.&lt;/p&gt;

&lt;h3&gt;Explore projects that are explicitly not for profit&lt;/h3&gt;

&lt;p&gt;Money taints things, there is no denying this.  So I suggest to find an outlet that you purposefully can&amp;rsquo;t/don&amp;rsquo;t make money from to help exercise your brain.  That might mean creating websites, making music, or hacking on an epic perl script that no one but yourself will use.  It doesn&amp;rsquo;t have to be something different from your work &amp;ndash; it just has to be separated from your work.  Something you can change or destroy without worrying about what others think.&lt;/p&gt;

&lt;h3&gt;Stop working if you&amp;rsquo;re producing crap&lt;/h3&gt;

&lt;p&gt;The only thing worse than being unproductive at work is forcing false productivity.  If you find yourself at your desk and you can&amp;rsquo;t come up with anything useful, just stop trying.  Leave your desk and go do something else.  Maybe for a few hours, maybe for a week, maybe &lt;a href=&quot;http://www.fastcompany.com/blog/cliff-kuang/design-innovation/design-geniuss-secret-time-and-lots-it&quot;&gt;for a year&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Accept that there is no way you can be productive for 40 hours a week&lt;/h3&gt;

&lt;p&gt;The 40 hour work week is completely unsustainable.  Human beings are not meant to sit down and &lt;em&gt;really&lt;/em&gt; focus for 40 hours a week, 50 weeks a year.  Our brains can&amp;rsquo;t handle it.  I&amp;rsquo;m sure startup founders will come in here exclaiming how they&amp;rsquo;ve been working 100 hour work weeks for 6 months now and every hour was well spent.  They&amp;rsquo;re lying.&lt;/p&gt;

&lt;p&gt;Your brain &lt;em&gt;needs&lt;/em&gt; to purposefully not think in order to come up with creative ideas.  That might mean relaxing to your favorite book or movie while your subconscious attacks your latest project.  You&amp;rsquo;re not working in the strict sense&amp;ndash;but you&amp;rsquo;re getting work done.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not to say you can&amp;rsquo;t have weeks where you get hundreds of hours of work done.  But in my experience, after a week like that, I need another week or two to decompress.&lt;/p&gt;

&lt;h2&gt;Focus on what matters&lt;/h2&gt;

&lt;p&gt;My goal with this post is to hopefully get people to stop thinking in hours.  Start focusing on making great things.  It&amp;rsquo;s about the things you produce, not the hours required to make them.&lt;/p&gt;

&lt;p&gt;Once you realize you&amp;rsquo;ve been focused on the wrong metric I think you&amp;rsquo;ll realize  arguing about a work/life balance is just ridiculous.  Spend time on your life. Spend time on your work. But always strive to do better. That&amp;rsquo;s all you need.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Joining GitHub</title>
   
     <link href="http://warpspire.com/blog/joining-github" />
   
   <updated>2009-10-01T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/joining-github</id>
   <content type="html">&lt;p&gt;I still feel like it was last week I decided to &lt;a href=&quot;/features/ch-ch-ch-changes/&quot;&gt;give up my &amp;ldquo;safe&amp;rdquo; job at &lt;strike&gt;Web Associates&lt;/strike&gt; Level Studios&lt;/a&gt; to play around with the &lt;a href=&quot;http://entp.com&quot;&gt;ENTP&lt;/a&gt; crew.  Well, it&amp;rsquo;s time for another move.  Last week I was given an offer I just couldn&amp;rsquo;t refuse&amp;ndash;to join the amazing &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; team (&lt;a href=&quot;http://github.com/kneath&quot;&gt;my GitHub profile&lt;/a&gt;).  For those of you who don&amp;rsquo;t know who GitHub is: shame on you.  GitHub has taken something as boring as source control and made it something that &lt;em&gt;brings people together&lt;/em&gt;.  Social coding, indeed.&lt;/p&gt;

&lt;h2&gt;A brief look at the past couple years&lt;/h2&gt;

&lt;p&gt;The past couple of years have been a crazy blur of projects for me.  Most of what I did for ENTP was for [redacted], so you won&amp;rsquo;t be seeing most of what I did, but I thought I&amp;rsquo;d spend a few minutes to archive (for my own good) some of the public-facing projects I completed.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://tenderapp.com&quot;&gt;Tender&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;http://tenderapp.com&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/github/tender_marketing.jpg&quot; alt=&quot;Tender&#39;s Marketing Site&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;By in large, the biggest project I worked on ENTP was &lt;a href=&quot;http://tenderapp.com&quot;&gt;Tender&lt;/a&gt; &amp;ndash; and I&amp;rsquo;ll be honest, it&amp;rsquo;s going to hurt to let this go.  Tender was my baby, and I did all of the IA, design and front-end work for the site as well as some marketing and analytical work.  The shining side of that tunnel is that of course GitHub &lt;a href=&quot;http://support.github.com&quot;&gt;uses Tender&lt;/a&gt; for their support, so I&amp;rsquo;ll at least get to use it and see how ENTP shapes the product.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://iphone.lighthouseapp.com&quot;&gt;Lighthouse iPhone&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;http://iphone.lighthouseapp.com&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/github/lighthouse_iphone.jpg&quot; alt=&quot;Lighthouse iPhone Screenshots&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;Designing an iPhone optimized interface was one of my first projects at ENTP.  It doesn&amp;rsquo;t benefit from any of the OS 2.0+ features (HTML5, CSS Animations, Etc) since the code was created before these came along, but it gets the job done.  It was a great exploration in turning a complicated interface and trimming it down to the bare essentials.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://entp.com&quot;&gt;ENTP.com&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;http://entp.com&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/github/entp.jpg&quot; alt=&quot;ENTP.com Screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;I designed this in collaboration with Justin Palmer when ENTP decided they needed a new site.  It&amp;rsquo;s got a few interesting features (like pulling in our current GitHub projects on demand in the footer), but it&amp;rsquo;s mostly just a brochure site for the agency.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://hoth.entp.com&quot;&gt;Hoth&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;http://hoth.entp.com&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/github/entp_hoth.jpg&quot; alt=&quot;Hoth Screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;Hoth is ENTP&amp;rsquo;s blog.  This design accompanied the new ENTP.com design and added in a bit of tumble-like functionality to the templates.&lt;/p&gt;

&lt;h2&gt;On to the next chapter&lt;/h2&gt;

&lt;p&gt;So now I enter the third dream job I&amp;rsquo;ve had in the 4 years since I graduated college (none of which have been slightly related to my degree). I&amp;rsquo;ll be diving into a design/front-end role for the team and help clean up and take the product to the next level.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;&lt;a href=&quot;http://github.com&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/github/octocat.png&quot; alt=&quot;OctoCat&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;ll see ya&amp;rsquo;ll at the next GitHub drinkup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installable apps</title>
   
     <link href="http://warpspire.com/blog/installable-apps" />
   
   <updated>2009-05-03T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/installable-apps</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;m getting kind of tired of all these &lt;em&gt;web&lt;/em&gt; developers complaining about the time it takes to get updates to their apps up on the iTunes App Store.  The truth is this complaining has some merit.  But you have to realize that these people are not making &lt;em&gt;web&lt;/em&gt; applications, they&amp;rsquo;re making &lt;em&gt;installable&lt;/em&gt; applications.  The problem is not Apple. The problem is lack of QA testing.&lt;/p&gt;

&lt;h2&gt;Your application will have many bugs&lt;/h2&gt;

&lt;p&gt;The first rule of development: your code is going to have a lot of bugs. I don&amp;rsquo;t care if you&amp;rsquo;ve got 3 days experience or 30 years experience in the industry. &lt;strong&gt;Your code will have bugs.&lt;/strong&gt; This isn&amp;rsquo;t a pride issue, it&amp;rsquo;s a fact of life. Good developers know this and rely on testing (code, user-acceptance, performance) to expose bugs so they can fix them.&lt;/p&gt;

&lt;h2&gt;Bugs will appear after your code is deployed&lt;/h2&gt;

&lt;p&gt;Whether it&amp;rsquo;s the Y2k bug, deprecation of a technology, or your application getting blacklisted from a web service &amp;ndash; some bugs are going to show up after your code is deployed.  This is something you should expect.  Again, this is not negotiable. It is going to happen.&lt;/p&gt;

&lt;h2&gt;The web makes us lazy&lt;/h2&gt;

&lt;p&gt;The truth is, developing web applications makes us lazy.  I can fix a bug, deploy, and it&amp;rsquo;s fixed in about 15 seconds.  This is why I &lt;em&gt;love&lt;/em&gt; working on hosted web applications.  You&amp;rsquo;ve got such immense power over the deployment process.  Some things that rock about web apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can be &lt;em&gt;really lazy&lt;/em&gt; with UAT (User Acceptance Testing).  Users will do your UAT for your and you can fix it on the fly.&lt;/li&gt;
&lt;li&gt;You can be &lt;em&gt;really lazy&lt;/em&gt; with bugs that will appear after deploy.  If a web service changes, you fix it and redeploy. Done.&lt;/li&gt;
&lt;li&gt;You only need &lt;em&gt;one computer&lt;/em&gt; to test your application.  No need to purchase multiple hardware platforms, video cards, or install multiple operating systems!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;You can&amp;rsquo;t be lazy with installable applications&lt;/h2&gt;

&lt;p&gt;I once worked on a desktop application that was being sent out on millions of machines.  This application was going to be the first thing that started up when the user booted the machine.  It also meant we didn&amp;rsquo;t have the option to issue updates for the application after deployment.  We spent &lt;em&gt;tons&lt;/em&gt; of time doing user testing on dozens of machines.  And then the client did user testing.  And then the client&amp;rsquo;s QA department did even more testing.  And then the client&amp;rsquo;s QA department did more testing throughout the whole time they were writing hard drives.&lt;/p&gt;

&lt;p&gt;Remember the days when you updated applications with &lt;em&gt;CDs&lt;/em&gt; or &lt;em&gt;floppy disks&lt;/em&gt;?  My god, for a while there it just &lt;em&gt;wasn&amp;rsquo;t feasible&lt;/em&gt; to update installable applications over the internet.  The end result? Software development firms spent a lot of time and money on QA.  Same goes for game development companies.&lt;/p&gt;

&lt;p&gt;My point is: if you know that one of your restraints is updating can be slow or impossible, you &lt;em&gt;spend more time testing the application.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The App Store is slow&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s true the App Store is slow when it comes to delivering updates.  To me, this is just a known variable.  Wouldn&amp;rsquo;t it be awesome if they had 24 hour turnaround? Sure would be.  But it&amp;rsquo;s one of those tradeoffs you get with a closed system.  If you want to trade it for an open system &amp;ndash; build a web application.  It&amp;rsquo;s not that hard.&lt;/p&gt;

&lt;p&gt;I know it sucks testing your application.  I know as a lone developer you don&amp;rsquo;t have the money to hire testers.&lt;/p&gt;

&lt;p&gt;But think of the rewards.  The App Store is something of a gold rush right now.  A small group of people have made obnoxious profits off very little effort.  There&amp;rsquo;s almost no overhead ($100 application fee? psh) &amp;ndash; and anyone can submit apps.  It&amp;rsquo;s a shitty closed ecosystem controlled by Apple. But it&amp;rsquo;s a shitty closed ecosystem of chocolate-filled pools lined with gold and supermodels dressed in nothing but $100 bills if you strike it rich.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xcode window management sucks</title>
   
     <link href="http://warpspire.com/blog/xcode-window-management" />
   
   <updated>2009-02-23T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/xcode-window-management</id>
   <content type="html">&lt;div class=&quot;infobox&quot;&gt;
&lt;p&gt;&lt;strong&gt;Hi, did you come here to tell me that Xcode offers &quot;all-in-one&quot; editing?&lt;/strong&gt; Please, don&#39;t send me an email. This is addressed in this article if you take time to read it.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;I posted some thoughts to twitter last night about how much the Xcode window management drives me insane.  What I got back was a huge reaction of &amp;ldquo;it&amp;rsquo;s perfect&amp;rdquo; and &amp;ldquo;this is how OSX works&amp;rdquo;  Suddenly I was wondering, am I just insane for thinking the window management is absolutely horrible?&lt;/p&gt;

&lt;p&gt;No, no. I&amp;rsquo;m not. It&amp;rsquo;s horrible.  Just because Apple built it, does not make it perfect.&lt;/p&gt;

&lt;h2&gt;Tabs are the future (actually it&amp;rsquo;s been the standard for years)&lt;/h2&gt;

&lt;p&gt;Tabs have clearly proven themselves to be a superior method for editing multiple code files.  Why? Because the most recognizable thing about code file is it&amp;rsquo;s &lt;em&gt;filename&lt;/em&gt;.  Not the look of the text.  Let&amp;rsquo;s look at this through some examples.&lt;/p&gt;

&lt;h3&gt;Case #1: Window-based management FTW, Photoshop&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/xcode-windows/photoshop_full.jpg&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/xcode-windows/photoshop.jpg&quot; /&gt;&lt;/a&gt;
  &lt;small&gt;Example of window management in Photoshop&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Window management in OSX defaults to a new window for each document. This works wonderfully for most applications when you can see the differences visually.  Photoshop is a great example.  Using Exposé, I can see which document I mean to be working on at a glance  The &lt;em&gt;visual representation&lt;/em&gt; of the document is the unique identifier.&lt;/p&gt;

&lt;p&gt;Some more points on why this works so well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image documents are the &lt;em&gt;only windows&lt;/em&gt; you will ever see in Photoshop. Everything else is a panel. This functionality is the same for all five-star document-based apps. iWork, iLife, etc.  There is a really good reason Apple chose to hide panels when activating Exposé.&lt;/li&gt;
&lt;li&gt;Photoshop is a document immersive program. It&amp;rsquo;s unlikely you&amp;rsquo;ll be working on more than one PSD at a time.  The document is all that matters. Conversely with code, the project is all that matters (not one code file).&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Case #2: Tab-based management FTW, Texmtate&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/xcode-windows/textmate_full.jpg&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/xcode-windows/textmate.jpg&quot; /&gt;&lt;/a&gt;
  &lt;small&gt;Example of window management in Texmate&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Window management for Textmate is handled via tabs and a persistent sidebar.  At a glance, you can see all files you&amp;rsquo;re currently working on.  In the case of Cocoa, you are often switching between interface &amp;amp; implementation files, but this is easily handled via cmd-opt-up, so long as you have the name of the class right, you&amp;rsquo;ve got the right file.&lt;/p&gt;

&lt;p&gt;Some points on why this works so well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows provide a way to group files in a meaningful manner. Each window is a unique project. Remember, the project is the important thing &amp;ndash; when coding in Cocoa, you&amp;rsquo;ll need to edit multiple files at once to make them work with one another.&lt;/li&gt;
&lt;li&gt;I can quickly move between individual files via the keyboard. Considering coding is almost purely typing, keeping my hands on the keyboard is &lt;em&gt;killer&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Case #3: WTF-based management FTL, Xcode&lt;/h3&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;http://assets.warpspire.com/images/xcode-windows/xcode_full.jpg&quot;&gt;&lt;img src=&quot;http://assets.warpspire.com/images/xcode-windows/xcode.jpg&quot; /&gt;&lt;/a&gt;
  &lt;small&gt;Example of window management in Xcode&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;Window management for Xcode is handled via a combination of this thing called a Project window, which morphs depending on it&amp;rsquo;s toolbar state, windows for each document, and windows for ancillary programs (like the model editor).  Please note I have the same number of windows open in this screenshot as I did in Textmate (7).  It&amp;rsquo;s actually a pretty small program,  but completely overwhelming.&lt;/p&gt;

&lt;p&gt;Some points on why this doesn&amp;rsquo;t work so well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows mean different things.  Some mean code documents, some mean visual aid, some mean a kind of &amp;ldquo;project&amp;rdquo; that groups all things.&lt;/li&gt;
&lt;li&gt;The project window continually morphs it&amp;rsquo;s state as you enter and exit debugging. It&amp;rsquo;s appearance is different, not upon your application&amp;rsquo;s state, but rather the toolbar button in the upper left, that automatically changes (one-way).&lt;/li&gt;
&lt;li&gt;All the code looks the same. There is no unique identifier in Exposé mode. I must selectively hover over each file and read it&amp;rsquo;s filename. Or, I can exposé to try and find the project window (which can look much like a code window too), and then open a new document.&lt;/li&gt;
&lt;li&gt;If I accidentally Cmd-W the Project window, I have to start from scratch, opening the whole project and each document again. This often happens as you accidentally open windows and want to immediately close them.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some may counter, telling me that Xcode offers editing inside the project window. Sure, this works, but offers just as many frustrations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;em&gt;must&lt;/em&gt; single click on files to open them. Double-clicking them still opens them in a new document.&lt;/li&gt;
&lt;li&gt;Because of the above, and the last bullet on the previous list, I constantly find myself accidentally closing the project because I was trying to close an accidentally opened window.&lt;/li&gt;
&lt;li&gt;Unless I choose not to run my program, I constantly have to switch out of debug mode and back into editing mode via the toolbar.&lt;/li&gt;
&lt;li&gt;Every single time I open Xcode I have to force it into editor mode.&lt;/li&gt;
&lt;li&gt;There is a delay in single clicking a document.  You click the file on the sidebar, the sidebar highlights, but the new document doesn&amp;rsquo;t open in the editing window for a second or two. When trying to scan documents for some code, this results in endless confusion.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s no idea of &amp;ldquo;open files&amp;rdquo; in this mode. No context for which I&amp;rsquo;m working. I can&amp;rsquo;t say, work on the View Controllers by opening each of them. Each time I must select the unique view controller in the sidebar, ordered alphabetically.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;It&amp;rsquo;s a shame&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s a shame, because other than the window management, Xcode is really an awesome IDE. The actual text editing is great as is debugging, scriptability, and file management. It really helps solve all the problems that Cocoa apps force upon mere text editors (long method names, class names, files being in one directory, different types of files in the same directory, etc).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the program&amp;rsquo;s fatal flaw in my mind.  It isn&amp;rsquo;t that it&amp;rsquo;s sub-par, or not good enough &amp;ndash; it&amp;rsquo;s downright infuriating to use. I want to do mean things to cute kittens whenever I use it.  So I don&amp;rsquo;t. I use TextMate. Which actually is very good at Cocoa &amp;amp; Objective-C. But it means much more typing (especially with the shift key) since TextMate favors tab-triggers rather than tab-completion.&lt;/p&gt;

&lt;p&gt;At the end of the day, this is the kind of stuff I hope Mac developers care about.  It&amp;rsquo;s about making the user experience the #1 priority in software development.  And it&amp;rsquo;s something that I&amp;rsquo;m confident Apple knows about and intends to fix in future versions of Xcode. Because they care about the user experience.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Top reasons your CSS columns are messed up</title>
   
     <link href="http://warpspire.com/blog/css-column-tricks" />
   
   <updated>2008-05-12T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/css-column-tricks</id>
   <content type="html">&lt;p&gt;I believe the recent surge in popularity of CSS frameworks comes from a lack of basic understanding of the CSS box model and how it&amp;rsquo;s implemented across browsers.  I wanted to share with you some quick tips on how to avoid easy pitfalls so you can create your own CSS framework in no time flat, without all the cruft of having ten thousand column combinations available.  Keeping these quick tips in mind at all times will allow you to do something I like to call &lt;em&gt;defensive coding&lt;/em&gt; &amp;ndash; and really that&amp;rsquo;s all CSS frameworks are: defensively coded snippets of CSS.&lt;/p&gt;

&lt;h2&gt;Your margins are doubled in IE6&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://assets.warpspire.com/images/css-column-tricks/ie6doublefloat.gif&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s a super common pitfall: IE6 will double margins facing the direction of the float.  Example problematic code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sidebar will have a 40px left margin in IE6 &amp;ndash; almost certainly throwing the sidebar down below the content, and not next to the content as it should be.  Easy fix: add &lt;code&gt;display:inline;&lt;/code&gt;  No side effects in any browser, and IE6 obeys margins perfectly.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Why it works:&lt;/strong&gt; By declaring &lt;code&gt;float&lt;/code&gt; on an element, you implicitly demand that it must be rendered as a block element &amp;ndash; thus rendering the &lt;code&gt;display:inline&lt;/code&gt; inert.  However, due to IE6&amp;rsquo;s awesome CSS engine, it fixes a bizarre bug that is the #2 reason I see CSS columns fail in IE6.&lt;/p&gt;

&lt;h2&gt;Your content is wider than your column&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://assets.warpspire.com/images/css-column-tricks/extendingcolumns.gif&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s pretend you&amp;rsquo;ve got this simplistic setup of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;columns&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/images/awesome.gif&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.main --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Sidebar rules!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.sidbear --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.columns --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Harmless right? You might view this in Firefox and everything will be fine. But then you look at it in IE6 and your sidebar has mysteriously dissapeared below &lt;code&gt;.main&lt;/code&gt;.  WTF? You look at the HTML, the CSS, and everything&amp;rsquo;s fine.  &lt;strong&gt;What could possibly be wrong?&lt;/strong&gt;  A common problem here is if &lt;code&gt;awesome.gif&lt;/code&gt; is 510px wide.  What this does is push out &lt;code&gt;.main&lt;/code&gt; to 510px, and suddenly there&amp;rsquo;s not enough room for &lt;code&gt;.sidebar&lt;/code&gt; inside &lt;code&gt;.columns&lt;/code&gt; any longer.  Ack!&lt;/p&gt;

&lt;p&gt;Easy fix: add &lt;code&gt;overflow:hidden&lt;/code&gt; to your columns.  This forces the width restriction to crop any extruding content.  New magical CSS:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Your margins extend past your container&lt;/h2&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://assets.warpspire.com/images/css-column-tricks/negativemargin.gif&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;So you&amp;rsquo;re building out a simple product listing template out, and you throw it in an unordered list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;85px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;listing&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Product #1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Product #2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Product #3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Product #4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This CSS will work just fine in something like Firefox, but for mysterious reasons you&amp;rsquo;ll see that Product #4 appears on it&amp;rsquo;s own line in IE6.  What&amp;rsquo;s happening here? I mean 4 columns x 85px + 3 gaps x 20px = 400px, right? Except that your 4th gap is hanging over the right edge &amp;ndash; pushing the true width of the blocks to 420px.  Firefox is smart and lets that margin just hang out there &amp;ndash; but IE6 will apply that margin within the parent wrapper &amp;ndash; throwing the 4th item down since it takes up 20px more than it should have.&lt;/p&gt;

&lt;p&gt;The fix? Apply a left margin to each item, with a negative margin to the wrapper.  This means that every item has a visible margin, but the whole block of elements are yanked back by the negative margin:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;420px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;85px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gets around the nasty solution of adding a class to the first or last item in every row &amp;ndash; something I&amp;rsquo;ve seen with abundance around the web.&lt;/p&gt;

&lt;h2&gt;Building a CSS framework in no time&lt;/h2&gt;

&lt;p&gt;Wev&#39;e got to start out with some basic HTML.  Here&amp;rsquo;s what I&amp;rsquo;ve been using lately:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;columns col2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;column first&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.first --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;column last&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.last --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.columns --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For different column widths, I&amp;rsquo;ve been changing out the &lt;code&gt;col2&lt;/code&gt; declaration to things like &lt;code&gt;col2A, col2B, col2C&lt;/code&gt; and so on. You could easily give them more semantic names like &lt;code&gt;products-columns&lt;/code&gt; too.&lt;/p&gt;

&lt;h3&gt;Self clearing is the future&lt;/h3&gt;

&lt;p&gt;The first step for any column framework is self-clearing. It&amp;rsquo;s easy, practical, and reduces all those damn clearing divs.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Float those columns&lt;/h3&gt;

&lt;p&gt;Next step is to actually float those columns. So let&amp;rsquo;s add a couple more declarations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.columns&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.col2&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.col2&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.col2A&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.col2B&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.col3&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.col3&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;280px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.col3&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Done&amp;hellip; uh, what?&lt;/h3&gt;

&lt;p&gt;Oh, yeah. That&amp;rsquo;s it. That&amp;rsquo;s all it takes to create reliable columns in CSS. Really.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an &lt;a href=&quot;http://assets.warpspire.com/images/css-column-tricks/example.html&quot;&gt;example page&lt;/a&gt; to prove it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I don&#39;t use CSS Frameworks</title>
   
     <link href="http://warpspire.com/blog/css-frameworks" />
   
   <updated>2007-08-17T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/css-frameworks</id>
   <content type="html">&lt;p&gt;CSS Frameworks seem like an awesome advancement at first glance: speed up your development, normalize your code base, and eliminate those nasty browser bugs!  Hot damn, where do I sign up?  Unfortunately there&amp;rsquo;s some pretty strong caveats that go with those statements.&lt;/p&gt;

&lt;h2&gt;The frameworks themselves are very good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d like to start this off by saying there&amp;rsquo;s nothing inheritly wrong with any of the CSS, HTML, or ideas put into these frameworks.  I also think it&amp;rsquo;s an absolutely fabulous idea that people are writing them &amp;ndash; it gives newcomers an easy way out to create professional looking designs using semantic XHTML and CSS.&lt;/p&gt;

&lt;h2&gt;Advantages of Frameworks&lt;/h2&gt;

&lt;p&gt;Most CSS frameworks offer three primary selling points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed up your develoment (don&amp;rsquo;t have to write all that HTML/CSS)&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t worry about those nasty IE bugs!&lt;/li&gt;
&lt;li&gt;Normalize your code/class base&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Speeding up your development&lt;/h3&gt;

&lt;p&gt;For those who have intimate knowledge of the framework, I do believe the frameworks will speed up development.  But for the average user, I think that the time required to understand the architecture of the framework far outweighs the menial task of coding it from scratch.&lt;/p&gt;

&lt;p&gt;Over the past three years, I&amp;rsquo;ve built unknown dozens of layouts, with most of them being extremely visually complex.  On average, it takes me about 8 hours to build out a Master design into a functioning bug-free template.  Of that time, I would have to say that doing the basic layout &amp;amp; typography (framework material) takes less than 20 minutes.  That&amp;rsquo;s &lt;strong&gt;less than 5% of development time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may save time, but the question quickly becomes how much time, and at what cost?  We&amp;rsquo;ll cover that later.  My point being that frameworks do not solve the hard problems in CSS &amp;ndash; the ones that pop up when you&amp;rsquo;re knee-deep in HTML and suddenly the goddamn box doesn&amp;rsquo;t show up in IE6.  These are the problems that take the majority of time when developing a website.&lt;/p&gt;

&lt;h3&gt;Don&amp;rsquo;t worry about  IE bugs&lt;/h3&gt;

&lt;p&gt;Well, gee that sure would be a wonderful thing if that were the case, wouldn&amp;rsquo;t it?  The truth is the frameworks do eliminate some bugs &amp;ndash; but they&amp;rsquo;re the easy ones to pick off.  The ones solved by a quick &lt;code&gt;display:inline&lt;/code&gt; or &lt;code&gt;height:1%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The frameworks don&amp;rsquo;t solve bugs where none of the public hacks work.  Or where IE inexplicably adds a 30px top margin to your element, but then dissolves in when you hover over your main navigation.  It doesn&amp;rsquo;t solve the problems when IE displays the same HTML and CSS differently on two different computers.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t solve the hard problems.&lt;/p&gt;

&lt;h3&gt;Normalize your code base&lt;/h3&gt;

&lt;p&gt;This is one area I think frameworks are great at: getting a large team of people all using the same code structure.  But then again, I think this can be solved by an internal styleguide just the same.&lt;/p&gt;

&lt;h2&gt;Disadvantages of frameworks&lt;/h2&gt;

&lt;p&gt;There are a few pretty severe disadvantages of frameworks in my eyes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarity with your code&amp;rsquo;s architecture&lt;/li&gt;
&lt;li&gt;Inheriting someone else&amp;rsquo;s bugs&lt;/li&gt;
&lt;li&gt;Not learning&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Familiarity with your code&amp;rsquo;s architecture&lt;/h3&gt;

&lt;p&gt;This is the largest reason I&amp;rsquo;ve never built or used a CSS framework.  By building a site from the ground up, you gain a knowledge of your site&amp;rsquo;s architecture that can&amp;rsquo;t be learned through any study or documentation.  When a programmer asks you a question about restructuring the HTML, you can answer right away.  You know where the CSS styles are (hopefully) and you know &lt;em&gt;how&lt;/em&gt; the layout works.&lt;/p&gt;

&lt;p&gt;This is increasingly relevant in today&amp;rsquo;s Javascript-out-the-ass world.  Once you start manipulating the XHTML/CSS of your site through dynamic scripting: you better know how it&amp;rsquo;s laid out.  Javascript-based effects are tied very closely to the CSS structure of the site.  You&amp;rsquo;ll have to know when you can use &lt;code&gt;float&lt;/code&gt; and when you can use &lt;code&gt;position&lt;/code&gt; to lay out elements.  Should you use &lt;code&gt;line-height&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, or &lt;code&gt;height&lt;/code&gt; to get that container to extend?  It&amp;rsquo;s a very important decision: and laying out the architecture helps you achieve this.&lt;/p&gt;

&lt;h3&gt;Inheriting someone else&amp;rsquo;s bugs&lt;/h3&gt;

&lt;p&gt;At the end of the day, no framework is perfect. No design is perfect.  But instead of fixing your bugs, you&amp;rsquo;re fixing someone else&amp;rsquo;s bugs.  Do you know how much it sucks fixing your own bugs?  It sucks 10,000x worse fixing someone else&amp;rsquo;s bugs.&lt;/p&gt;

&lt;h3&gt;Not learning&lt;/h3&gt;

&lt;p&gt;Again, on my mantra of why I wouldn&amp;rsquo;t recommend frameworks comes the lack of knowledge gained by fixing those problems frameworks solve.  I&amp;rsquo;ve &lt;a href=&quot;/tipsresources/web-production/most-amazing-css-tip-youll-ever-read-in-your-life/&quot;&gt;advocated before&lt;/a&gt; how important it is to build websites.  I can guarantee you that if you keep building sites from the ground-up, you&amp;rsquo;ll learn new things each time.  You&amp;rsquo;ll learn not only how to fix and avoid browser bugs, but how to make your markup more elegant.  You&amp;rsquo;ll transform the act of building websites from a job into an art.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this clears up a bit of why I don&amp;rsquo;t like CSS frameworks.  It&amp;rsquo;s not that they&amp;rsquo;re bad &amp;ndash; it&amp;rsquo;s just that I don&amp;rsquo;t think they offer enough value for the drawbacks.  It all comes down to intelligently analyzing your situation before you jump head-first into someone else&amp;rsquo;s code.&lt;/p&gt;

&lt;h3&gt;The one &amp;ldquo;framework&amp;rdquo; I do use&lt;/h3&gt;

&lt;p&gt;On that note, there is one framework I do use.  It&amp;rsquo;s the CSS reset &amp;ndash; not that I&amp;rsquo;d even call it a framework.  Here it is in all its glory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  Global Styles&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;------------------------------------------------------------------------------------*/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;fieldset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;fieldset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.hide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.print-logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.close-button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What&amp;rsquo;s your take on frameworks? Do you use them? If so, what other benefits have you gained from using them?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MooTools Javascript Classes</title>
   
     <link href="http://warpspire.com/blog/mootools-javascript-classes" />
   
   <updated>2007-07-16T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/mootools-javascript-classes</id>
   <content type="html">&lt;p&gt;One of Javascript&amp;rsquo;s major blunders when it comes to Object-Oriented design is the lack of true classes.  Lucky for us, we&amp;rsquo;ve had every library author out there have their whack at creating a class structure.&lt;/p&gt;

&lt;h2&gt;What is a class?&lt;/h2&gt;

&lt;p&gt;A class is kind of a template.  One of the big concepts of OO is treating your code as real world objects.  Let&amp;rsquo;s say you want to have three variables for different dogs: ollie, rowdy, and killer.  Each of these variables should be an &lt;em&gt;instance&lt;/em&gt; of a &lt;em&gt;class&lt;/em&gt;.  That class&amp;rsquo;s name would be Dog. Each particular dog is an instance of the generic Dog class.  I won&amp;rsquo;t go into much more detail here: there&amp;rsquo;s plenty of reading to do on what classes really are, and how to use them best.&lt;/p&gt;

&lt;h2&gt;MooTools = &amp;lt;3&lt;/h2&gt;

&lt;p&gt;Out of all the class systems I&amp;rsquo;ve used, I&amp;rsquo;d have to say MooTool&amp;rsquo;s class system (spanwed from Dean Edward&amp;rsquo;s Base) is the cleanest, most extensible system yet.  Creating and extending classes is ridiculously easy.&lt;/p&gt;

&lt;h3&gt;Create a class&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Animal Runs!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;Animal Runs!&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(It&amp;rsquo;s also fair to note that MooTools supports Prototype&amp;rsquo;s &lt;code&gt;Class.create&lt;/code&gt; method as well)&lt;/p&gt;

&lt;h3&gt;Extend a class&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Woof! Woof!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;Animal Runs!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;Woof! Woof!&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;rsquo;ll notice you still get access to parent methods (through &lt;code&gt;this.parent()&lt;/code&gt;), as you can see where this.text gets initialized when a new instance of Dog is created.&lt;/p&gt;

&lt;p&gt;The syntax is short, sweet, and to the point.  Furthermore it allows me all the flexibility I need&amp;hellip; well, almost.  MooTools team gets bonus points for the next section.&lt;/p&gt;

&lt;h2&gt;Javascript mixins&amp;hellip; kinda&lt;/h2&gt;

&lt;p&gt;There are two common actions that many Javascript actions have: options, and callbacks.  MooTools have created a sort of ruby-style mixin for classes to handle these functions.  MooTools calls these mixins Utility Classes.  To enable these, add this line to the code above:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Options&lt;/h2&gt;

&lt;p&gt;What does this do?  First off, it allows for quick, easy, extendible options.  All you do is set your default options in an options property, and then call the &lt;code&gt;setOptions&lt;/code&gt; method inside your class.  Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jack Russel Terrier&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Here&amp;#39;s the magic!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;My name is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; and I am &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; years old&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fireEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;afterBark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ollie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ollie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ollie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;My name is Ollie and I am 5 years old&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rowdy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Rowdy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;rowdy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;My name is Rowdy and I am 15 years old&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By mixing in the Options methods, you now have access to setOptions, which either uses user-defined options or class-based defaults (with one line of code).&lt;/p&gt;

&lt;h3&gt;Events&lt;/h3&gt;

&lt;p&gt;You can also define custom events (usually called callbacks).  Notice the &lt;code&gt;this.fireEvent(&#39;afterBark&#39;)&lt;/code&gt; bit in the Dog class above?  Check it out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;killer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Killer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;killer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;afterBark&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; just barked!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;killer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;My name is Killer and I am 5 years old&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==&amp;gt; &amp;quot;Killer just barked!&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It allows you to tie into the &lt;em&gt;same&lt;/em&gt; event functionality used for the DOM, but with your own methods you create in your classes. I&amp;rsquo;m in love with this easy functionality &amp;ndash; sure there&amp;rsquo;s been other ways to do this, but none so elegant as what the Moo team has come up with.&lt;/p&gt;

&lt;h3&gt;Chain&lt;/h3&gt;

&lt;p&gt;The last utility class is the Chain class.  This allows for some nice chaining of classes: I&amp;rsquo;ll leave it up to you to explore this one since I haven&amp;rsquo;t used it in great detail yet.  In a nutshell: it allows for time-dependent chains (so that events fire after another one is complete).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Every good Javascript developer knows that there&amp;rsquo;s 50 ways to skin a cat when it comes to classes and Javascript.  But for me, one of the largest reasons MooTools is my framework of choice is the underlying class system.  No extending &lt;code&gt;Object&lt;/code&gt;, and no overriding of parent methods.  The syntax is clean and easy to remember, giving it huge bonus points in my book.&lt;/p&gt;

&lt;p&gt;Personally, I would like to thank the smarter developers who have taken the hard hits with Javascript to implement these nice OO techniques.  Without them, my Javascript would still be procedural-based with tons of global variables thrown about.  Yay for frameworks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using TextMate&#39;s TODO bundle</title>
   
     <link href="http://warpspire.com/blog/textmate-todos" />
   
   <updated>2007-06-25T00:00:00-04:00</updated>
   <id>http://warpspire.com/blog/textmate-todos</id>
   <content type="html">&lt;p&gt;If you use TextMate, you should really think about using the TODO bundle more often.  It&amp;rsquo;s a simple, low-maintenance bundle that adds tremendous value to your code.&lt;/p&gt;

&lt;h2&gt;Setting TODO, FIXME, and CHANGELOG&lt;/h2&gt;

&lt;p&gt;Using the bundle is pretty easy.  In any language, just type in a quick comment with the prefix TODO, FIXME or CHANGED like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: different display for different types of clips: active, processing, etc&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@clip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Clip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: Make a real related clips dealieo&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@related_clips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Clip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:conditions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;clips.status = &amp;#39;processed&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this syntax lets you keep pushing ahead at full steam and leave the hard stuff for later.  For example, in the above example I wanted to get a quick functional prototype out the door.  It wasn&amp;rsquo;t mandatory that the Related Clips &lt;em&gt;actually&lt;/em&gt; be related: it was only mandatory that there was content present.&lt;/p&gt;

&lt;p&gt;You can also use the keywords FIXME or CHANGED throughout your code, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# FIXME: This totally breaks if an invalid ID is given&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@clip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Clip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# CHANGED: @related_clips now uses a model method related_clips&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@related_clips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Clip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;related_clips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This lets others working on the code let you know that you &lt;em&gt;know&lt;/em&gt; something is broken and/or changed, but you just don&amp;rsquo;t have time to get to it.&lt;/p&gt;

&lt;h2&gt;Getting the information back&lt;/h2&gt;

&lt;p&gt;Well, that&amp;rsquo;s all fine and well.. but how do you know what needs to be fixed/changed/done ?  Just hit Ctr+Shift+T  and TextMate will pop up with a pretty little list, hyperlinked and all&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;img src=&quot;http://assets.warpspire.com/images/textmate-todo-bundle/list.gif&quot; alt=&quot;Screenshot of the TODO list&quot; /&gt;
  &lt;small&gt;&lt;em&gt;Ctrl + Shift + T&lt;/em&gt; brings up a list of all your todo&#39;s&lt;/small&gt;
&lt;/div&gt;


&lt;p&gt;I use this bundle practically every time I open up Textmate.  It allows me to keep on a focused track of development, while still keeping a lot of &amp;ldquo;ooh, I need to do that sometime&amp;rdquo; kind of tasks on the radar.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Predictions for the future</title>
   
     <link href="http://warpspire.com/blog/predictions-for-the-future" />
   
   <updated>2006-01-13T00:00:00-05:00</updated>
   <id>http://warpspire.com/blog/predictions-for-the-future</id>
   <content type="html">&lt;p&gt;I thought it might be fun to say where I think the web, technology, and music are going in the next few years. I really feel 2006 is going to be some kind of renaissance for technology as a whole. As this whole ‘Web 2.0′ craze dies down, the ideas inherit in the movement will spread elsewhere. 2006 is going to be big.&lt;/p&gt;

&lt;h2&gt;Web standards what?&lt;/h2&gt;

&lt;p&gt;People will finally stop caring about web standards. It’s just how you make websites, plain as that. I think this actually happened last year in the professional world–but the amateurs are close to follow. People will finally stop becoming standards evangelists and realize they’re designing web sites. Not just building them. And that, the surface is in fact more important than the foundation.&lt;/p&gt;

&lt;h2&gt;Automattic will change the shape of blogging&lt;/h2&gt;

&lt;p&gt;I see an extremely bright future for Automattic. With a guy like Matt at the reigns great things are bound to come out. Change the face of blogging? Hell yea. How? I don&amp;rsquo;t know — and that’s why it’s going to be so big. I’m sure these guys have at least one more killer idea in the oven just waiting to come out.&lt;/p&gt;

&lt;p&gt;Many people may balk at that statement and wonder what reasoning I have for it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Matt is, in my opinion, the largest contributor to what blogging is today. He’s done more towards creating a community than anyone else out there. He’s got the idea. He’s got the people. He’s got the means.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Akismet works. Akismet is pure genius. Well, maybe not pure genius (as the idea is nothing but new). However, it works. It works damn well. Those using the heaven known as Akismet don’t know what comment spam is anymore. That’s how good it is. (Remember, Akismet = Automattic)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wordpress.com works. Wordpress.com is a great service, like blogger but infinitely better. This thing is taking off like no one could imagine. It’s going to continue to take off and gain influence. Automattic are the people behind wordpress.com.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Automattic and Wordpress will drive the internet in 2006. What this also means is that Symphony and its army of clones will not be the biggest thing to hit web publishing since the keyboard.&lt;/p&gt;

&lt;h2&gt;Hosted applications will rise&lt;/h2&gt;

&lt;p&gt;I don’t think that 2006 will see the decline of hosted applications. Perhaps ‘07, ‘08 we’ll see them crash back down. This year, we’re going to see more dynamic web sites out there than you ever thought possible. Social this, tagging that. But I don’t think this trend will last long. Soon people will realize that they really don’t care about tagging and discussing their sex life and will stop using these services. Shortly after, the services will fail and start to thin out to a few select sites that are actually useful–like Basecamp.&lt;/p&gt;

&lt;h2&gt;Vista won’t matter&lt;/h2&gt;

&lt;p&gt;Windows Vista won’t launch in 2006. The whole world won’t care. Slowly the average computer users are leaning towards OSX. As the iMacs and Mac Minis start invading retails stores across the country, people will inevitably be bought by Apple’s magnificent design. After using OSX for a week they’ll wonder why they didn’t buy a Mac earlier. Ultimately, people will see Vista as a piss-poor attempt at copying OSX and fixing holes and leaks in Windows that should have been resolved ten years ago.&lt;/p&gt;

&lt;p&gt;I suspect that Microsoft has simply dropped the ball in this court. Apple keeps slamming out home runs while Microsoft is in the pit planning next season. Too little, too late. Microsoft is going to feel the big knife of Apple cutting into XP sales just as Sony saw the iPod dominate their market. 2006 won’t be the year everyone switches, but it will be the year everyone wants to switch. Within a decade, OSX will topple Windows installations.&lt;/p&gt;

&lt;h2&gt;Macs will be huge&lt;/h2&gt;

&lt;p&gt;I think Apple has something revolutionary up their sleeves this year. Perhaps a 3, or 6 month time frame I think we’ll be seeing something that’s the new iMac (the last real revolution in Mac). I think this next set of hardware devices is what’s going to be pushing Apple into the mainstream. Remember, we’re talking Macs here –not iPods or TVs or any of that other jazz. I really think now with the big switch to Intel, Apple can unleash some ideas they’ve been working on for a long time.&lt;/p&gt;

&lt;h2&gt;The funk will overpower the electronica-4-beat-shuffle&lt;/h2&gt;

&lt;p&gt;As far as music, I think a lot of crappy bands will suffer the same fate boy bands suffered a few years back. Soon people will realize they don’t want to hear about rainy Sundays in Seattle to a boring 4/4 rhythm on every single track.&lt;/p&gt;

&lt;p&gt;But the funk will rise. Hear me now, disco and funk is going to be huge in 2006. I can see it coming already. C’mon, we all know you want to dance. Don’t hide it. Just do it.&lt;/p&gt;

&lt;p&gt;DRM will be a black spot on the music industry
I don’t think Sony’s DRM issues will ever be let down. Sony got hurt big time, a lot bigger than they think. Right now they’re realizing not only have they been beat by Apple, but they’ve been beat by their customers. Shivering in a corner, Sony will be forced to do something new.&lt;/p&gt;

&lt;p&gt;Luckily, the rest of the industry will be just as stupid. DRM is far from over. CEO’s will hear presentations from salespeople of development firms who can offer a “final solution” to music piracy. This will inevitably lead to more rootkit concerns, and ultimately more people stealing music than ever before.&lt;/p&gt;

&lt;p&gt;Meanwhile, independent labels will prosper.&lt;/p&gt;

&lt;h2&gt;So there you go…&lt;/h2&gt;

&lt;p&gt;Well, that about sums up my thoughts. I think right now is the best time ever to be a techno-geek, awesome things are going to happen. The web is exploding in popularity and technology is racing ahead faster than we can come up with ideas. I’m stoked to be a part of it, and can’t wait to see what everyone else has cooked up.&lt;/p&gt;
</content>
 </entry>
 

</feed>